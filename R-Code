library(tidyverse)
library(vctrs)
library(tidyselect)
library(naniar)
library(dplyr)
library(tidyr)
library(ggplot2)
library(survey)
library(rafalib)
library(modelr)
library(na.tools)
library(ggimage)
library(ggrepel)
library(remotes)
library(glue)
library(readr)
library(devtools)
library(nflscrapR)
library(nflfastR)
library(teamcolors)

seasons <- 1999:2020
pbp_Original <- purrr::map_df(seasons, function(x) {
  readRDS(
    url(
      glue::glue("https://raw.githubusercontent.com/guga31bb/nflfastR-data/master/data/play_by_play_{x}.rds")
    )
  )
})

roster <- readRDS(url("https://raw.githubusercontent.com/guga31bb/nflfastR-data/master/roster-data/roster.rds"))

pbp_Original <- pbp_Original %>% 
  mutate_at(vars(home_team, away_team, posteam, defteam, td_team), funs(case_when(
    . %in% "JAX" ~ "JAC",
    . %in% "STL" ~ "LAR",
    . %in% "LA" ~ "LAR",
    . %in% "SD" ~ "LAC",
    . %in% "OAK" ~ "LV",
    TRUE ~ .
  ))) 

pbp_Original$play_id <- 1:nrow(pbp_Original)
pbp <- pbp_Original
rm(pbp_Original) # this is to conserve memory

ShouldBeLabeledNoPlay <- pbp %>% filter(timeout == 1 & play_type != "no_play" 
                                        & !str_detect(desc, "(Challenge)") & !str_detect(desc, "(challenge)") & str_detect(desc, "(Timeout)"))
ShouldBeLabeledNoPlayVec <- ShouldBeLabeledNoPlay$play_id
pbp[ShouldBeLabeledNoPlayVec, "play_type"] <- "no_play"

WronglyLabeledTimeout <- pbp %>% filter(timeout == 1 & play_type != "no_play" 
                                        & !str_detect(desc, "(Challenge)") & !str_detect(desc, "(challenge)") & !str_detect(desc, "(Timeout)"))
WronglyLabeledTimeoutVec <- WronglyLabeledTimeout$play_id
pbp[WronglyLabeledTimeoutVec, "timeout"] <- 0

WrongLabelPATAsNoPlay <-  pbp %>% filter(extra_point_attempt == 1 & play_type != "extra_point")
WrongLabelPATAsNoPlayVec <- WrongLabelPATAsNoPlay$play_id
pbp[WrongLabelPATAsNoPlayVec, "play_type"] <- "extra_point"

WrongLabelTwoMinWarning <- pbp %>% filter( ((!is.na(play_type)) | (!is.na(play_type_nfl))) &
                                             ( (str_detect(desc, "(Two-Minute)")) |
                                                 (str_detect(desc, "(Two-minute)")) |
                                                 (str_detect(desc, "(Two Minute)")) |
                                                 (str_detect(desc, "(Two minute)"))))
WrongLabelTwoMinVec <- WrongLabelTwoMinWarning$play_id
pbp[WrongLabelTwoMinVec, "play_type"] <- NA
pbp[WrongLabelTwoMinVec, "play_type_nfl"] <- NA

Useless_NoSnap <- pbp %>% 
  filter( (penalty == 0 & 
             (timeout > 0 & play_type == "no_play")) |
            (is.na(play_type) & 
               ((is.na(play_type_nfl) & !str_detect(desc, "(enforced)") & !str_detect(desc, "(Enforced)") & !str_detect(desc, "(ENFORCED)")) | 
                  (play_type_nfl != "PENALTY" & play_type_nfl != "FREE_KICK" & play_type_nfl != "KICK_OFF" & 
                     !str_detect(desc, "(enforced)") & !str_detect(desc, "(Enforced)") & !str_detect(desc, "(ENFORCED)")))) )
Useless_NoSnap_Vec <- Useless_NoSnap$play_id

pbp <- pbp %>% filter(!play_id %in% Useless_NoSnap_Vec)
pbp$play_id <- 1:nrow(pbp)

WrongRunPassLabel <- pbp %>% filter(play_type == "run" & rush == 0 & pass == 0)
WrongRunPassLabelID <- WrongRunPassLabel$play_id
pbp[WrongRunPassLabelID, "rush"] <- 1

WronglyLabeledAsPunt <- pbp %>% filter(punt_attempt == 1 & 
                                         !str_detect(desc, "(Punt)") & !str_detect(desc, "(punt)"))
WronglyLabeledAsPuntVec <- WronglyLabeledAsPunt$play_id
pbp[WronglyLabeledAsPuntVec, "punt_attempt"] <- 0

WronglyLabeledAsPunt <- pbp %>% filter(punt_attempt == 1 & 
                                         !str_detect(desc, "(Punt)") & !str_detect(desc, "(punt)"))
WronglyLabeledAsPuntVec <- WronglyLabeledAsPunt$play_id
pbp[WronglyLabeledAsPuntVec, "punt_attempt"] <- 0
# Fix the play_types manually
# View(pbp %>% filter(game_id == "2000_06_WAS_PHI", qtr == 2)), 2 of final 3 plays of half
pbp[56397:56398, "play_type"] <- "run"

WronglyLabeledAsFumLost <- pbp %>% filter(fumble_lost == 1 & !str_detect(desc, "(Fumble)") & 
                                            !str_detect(desc, "(fumble)") & !str_detect(desc, "(FUMBLE)") &
                                            !str_detect(desc, "(muff)") & !str_detect(desc, "(Muff)") &
                                            !str_detect(desc, "(MUFF)") & !str_detect(desc, "(recover)") &
                                            !str_detect(desc, "(Recover)") & !str_detect(desc, "(RECOVER)"))
WronglyLabeledAsFumLostVec <- WronglyLabeledAsFumLost$play_id
pbp[WronglyLabeledAsFumLostVec, "fumble_lost"] <- 0

WronglyLabeledAsFGAtt <- pbp %>% filter(field_goal_attempt == 1 & !str_detect(desc, "(goal)") & 
                                          !str_detect(desc, "(Goal)") & !str_detect(desc, "(GOAL)"))
WronglyLabeledAsFGAttVec <- WronglyLabeledAsFGAtt$play_id
pbp[WronglyLabeledAsFGAttVec, "field_goal_attempt"] <- 0
pbp[WronglyLabeledAsFGAttVec, "field_goal_result"] <- NA
# Fix play_type, posteam manually
# View(pbp %>% filter(game_id == "2000_11_OAK_DEN", qtr == 3)), 7-9 minutes left
pbp[67714, "play_type"] <- "pass"
pbp[67715, "play_type"] <- "run"
pbp[67717, "play_type"] <- "kickoff"
pbp[67714:67716, "posteam"] <- "DEN"
pbp[67714:67716, "defteam"] <- "LV"
pbp[67714:67716, "posteam_type"] <- "home"

WronglyLabeledAsKickoff <- pbp %>% filter(kickoff_attempt == 1 & !str_detect(desc, "(kick)") & 
                                            !str_detect(desc, "(Kick)") & !str_detect(desc, "(KICK)"))
WronglyLabeledAsKickoffVec <- WronglyLabeledAsKickoff$play_id
pbp[WronglyLabeledAsKickoffVec, "kickoff_attempt"] <- 0

ShouldBeLabeledAsKneel1 <- pbp %>% filter(play_type == "run" & ( (str_detect(desc, "(kneel)"))
                                                                | (str_detect(desc, "(takes a knee)"))
                                                                | (str_detect(desc, "(take a knee)")) ))
ShouldBeLabeledAsKneel1Vec <- ShouldBeLabeledAsKneel1$play_id
pbp[ShouldBeLabeledAsKneel1Vec, "play_type"] <- "qb_kneel"
pbp[ShouldBeLabeledAsKneel1Vec, "qb_kneel"] <- 1

ShouldBeLabeledAsKneel2 <- pbp %>% filter(!is.na(down) & play == 1) %>%
  filter(score_differential > 0 & score_differential < 9) %>%
  filter(play_type == "run" & down == 3 & defteam_timeouts_remaining == 0 & game_seconds_remaining <= 40 & yards_gained < 1)
ShouldBeLabeledAsKneel2Vec <- ShouldBeLabeledAsKneel2$play_id
pbp[ShouldBeLabeledAsKneel2Vec, "play_type"] <- "qb_kneel"
pbp[ShouldBeLabeledAsKneel2Vec, "qb_kneel"] <- 1

# These are also mainly kneels, but not quite as automatic
# pbp %>% filter(!is.na(down) & play == 1) %>% filter(score_differential > 0 & score_differential < 9) %>% filter(play_type == "run" & defteam_timeouts_remaining == 0 & game_seconds_remaining <= 120 & yards_gained < 1)

ShouldBeLabeledAsSpike <- pbp %>% filter(play_type == "pass" & (str_detect(desc, "(spike)")))
ShouldBeLabeledAsSpikeVec <- ShouldBeLabeledAsSpike$play_id
pbp[ShouldBeLabeledAsSpikeVec, "play_type"] <- "qb_spike"
pbp[ShouldBeLabeledAsSpikeVec, "qb_spike"] <- 1

# An error here:
# View(pbp %>% filter(game_id == "2012_04_CLE_BAL", qtr == 4)), 2nd to last play of game
pbp[569786, "fourth_down_failed"] <- 0

# Another not too important error
# View(pbp %>% filter(game_id == "2018_01_ATL_PHI", qtr == 1)), 10:55 left
pbp[828002, "fourth_down_failed"] <- 1

# A weird situation (offsides, but first down given on 3rd and 15?)
# View(pbp %>% filter(game_id == "1999_10_SF_NO", qtr == 1)), 9:37 left
pbp[22994, "first_down_penalty"] <- 1
pbp[22994, "first_down"] <- 1

# Another odd situation (defensive delay of game leads to first)
# View(pbp %>% filter(game_id == "2000_17_ARI_WAS", qtr == 1)), 5:05 left
pbp[80542, "first_down_penalty"] <- 1
pbp[80542, "first_down"] <- 1

# Another error
# View(pbp %>% filter(game_id == "2006_10_WAS_PHI", qtr == 2)), 7:25 left
pbp[324380, "first_down_penalty"] <- 1
pbp[324380, "first_down"] <- 1

# Another error
# View(pbp %>% filter(game_id == "2005_04_MIN_ATL", qtr == 3)), 12:02 left
pbp[266321, "first_down_penalty"] <- 1
pbp[266321, "first_down"] <- 1

# Many errors here
# View(pbp %>% filter(game_id == "2018_01_ATL_PHI"))
# 8:23 Q2 DPI
pbp[828040, "first_down_penalty"] <- 1
pbp[828040, "first_down"] <- 1
# 2nd to last play of 1st half
pbp[828074, "first_down_penalty"] <- 1
pbp[828074, "first_down"] <- 1
# 1st play of Q4
pbp[828118, "first_down_penalty"] <- 1
pbp[828118, "first_down"] <- 1
# 2nd to last play of game
pbp[828162, "first_down_penalty"] <- 1
pbp[828162, "first_down"] <- 1

# Another error
# View(pbp %>% filter(game_id == "2000_03_NYG_CHI", qtr == 4)), 3rd and 2 at 9:24
pbp[49083, "first_down"] <- 1
pbp[49083, "first_down_rush"] <- 1

# Another error
# View(pbp %>% filter(game_id == "2000_16_OAK_SEA", qtr == 3)), 1:12 left
pbp[79814, "down"] <- 3
pbp[79814, "ydstogo"] <- 5

# Another error
# View(pbp %>% filter(game_id == "2007_03_STL_TB", qtr == 3)), 8:41 3rd down
pbp[351708, "first_down"] <- 1
pbp[351708, "first_down_rush"] <- 1
pbp[351708, "yards_gained"] <- 6

# Another error
# View(pbp %>% filter(game_id == "2009_12_TB_ATL", qtr == 2)), 2nd and 14, 2:00
pbp[458246, "first_down_penalty"] <- 1
pbp[458246, "first_down"] <- 1

# More data entry errors here:
# View(pbp %>% filter(game_id == "1999_14_MIN_KC", qtr == 2)), ending with 0:29 TD
pbp[32325, "play_id"] <- 32322
pbp[32322, "play_id"] <- 32323
pbp[32323, "play_id"] <- 32324
pbp[32324, "play_id"] <- 32325
# View(pbp %>% filter(game_id == "2000_01_TEN_BUF", qtr == 1)), 1:35 offsides
pbp[45102, "play_id"] <- 45103
pbp[45103, "play_id"] <- 45102
# View(pbp %>% filter(game_id == "2000_02_CAR_SF", qtr == 2)), 3rd/4th down at 1:23
pbp[45478, "play_id"] <- 45479
pbp[45479, "play_id"] <- 45478
# View(pbp %>% filter(game_id == "2000_02_WAS_DET", qtr == 1)), 9:37 FG/sack
pbp[47564, "play_id"] <- 47565
pbp[47565, "play_id"] <- 47564
# View(pbp %>% filter(game_id == "2000_03_ATL_CAR", qtr == 2)), ending in 1:42 run
pbp[47770, "play_id"] <- 47767
pbp[47767, "play_id"] <- 47768
pbp[47768, "play_id"] <- 47769
pbp[47769, "play_id"] <- 47770
# View(pbp %>% filter(game_id == "2000_04_WAS_NYG", qtr == 2)), 2 plays after 6:27 KO
pbp[51895, "play_id"] <- 51896
pbp[51896, "play_id"] <- 51895
# View(pbp %>% filter(game_id == "2000_06_PIT_NYJ", qtr == 4)), 2:20 INT
pbp[55835, "play_id"] <- 55836
pbp[55836, "play_id"] <- 55835
# View(pbp %>% filter(game_id == "2000_07_BAL_WAS", qtr == 2)), 6:27 1st/2nd down
pbp[56712, "play_id"] <- 56713
pbp[56713, "play_id"] <- 56712
# View(pbp %>% filter(game_id == "2000_07_JAX_TEN", qtr == 4)), 2:15 2nd/3rd down
pbp[57778, "play_id"] <- 57779
pbp[57779, "play_id"] <- 57778
# View(pbp %>% filter(game_id == "2000_09_TEN_WAS", qtr == 4)), 7:45 2nd/3rd down
pbp[63361, "play_id"] <- 63362
pbp[63362, "play_id"] <- 63361
# View(pbp %>% filter(game_id == "2000_11_NYJ_IND", qtr == 2)), 7:07 1st/2nd down
pbp[67502, "play_id"] <- 67503
pbp[67503, "play_id"] <- 67502
# View(pbp %>% filter(game_id == "2000_11_CHI_BUF", qtr == 4)), 4:30 3rd/4th down
pbp[66462, "play_id"] <- 66463
pbp[66463, "play_id"] <- 66462
# View(pbp %>% filter(game_id == "2000_13_PHI_WAS", qtr == 2)), starts at 13:50
pbp[72832, "play_id"] <- 72834
pbp[72833, "play_id"] <- 72832
pbp[72834, "play_id"] <- 72833
# View(pbp %>% filter(game_id == "2000_14_SEA_ATL", qtr == 3)), 12:25 1st/2nd down
pbp[75178, "play_id"] <- 75179
pbp[75179, "play_id"] <- 75178
# View(pbp %>% filter(game_id == "2000_17_CIN_PHI", qtr == 4)), 0:49 is messed up play
pbp[81302, "play_id"] <- 81289
pbp[81289, "play_id"] <- 81290
pbp[81290, "play_id"] <- 81291
pbp[81291, "play_id"] <- 81292
pbp[81292, "play_id"] <- 81293
pbp[81293, "play_id"] <- 81294
pbp[81294, "play_id"] <- 81295
pbp[81295, "play_id"] <- 81296
pbp[81296, "play_id"] <- 81297
pbp[81297, "play_id"] <- 81298
pbp[81298, "play_id"] <- 81299
pbp[81299, "play_id"] <- 81300
pbp[81300, "play_id"] <- 81301
pbp[81301, "play_id"] <- 81302
# View(pbp %>% filter(game_id == "2013_13_JAX_CLE", qtr == 3)), 9:44 PAT penalty
pbp[636525, "play_id"] <- 636526
pbp[636526, "play_id"] <- 636525
# View(pbp %>% filter(game_id == "2014_06_DEN_NYJ", qtr == 2)), 0:27 PAT penalty
pbp[663942, "play_id"] <- 663943
pbp[663943, "play_id"] <- 663942
pbp <- arrange(pbp, play_id)

# Two field goals from View(pbp %>% filter(game_id == "2009_11_SD_DEN", qtr %in% c(2, 4)))
# This fix is b/c they erroneously had the phrase "extra point" in the "desc" column
pbp[455201, "desc"] <- "Penalty occurred after the field goal and will be assessed on the kickoff.  PENALTY on DEN-M.Thomas, Unsportsmanlike Conduct, 15 yards, enforced at SD 30 - No Play."
pbp[455270, "desc"] <- "Penalty occurred after the field goal and will be assessed on the kickoff.  PENALTY on DEN-R.Fields, Unsportsmanlike Conduct, 15 yards, enforced at SD 30 - No Play."

# These plays have play == 0 and special == 0, for some reason (ERRORS)
IncorrectPlayLabel <- 
  pbp %>% filter(!is.na(down) & play_type != "qb_kneel" & play_type != "qb_spike" &
                   play == 0 & special == 0)
# None of these plays are special teams
IncorrectPlayLabelVec <- IncorrectPlayLabel$play_id
pbp[IncorrectPlayLabelVec, "play"] <- 1

IncorrectPlayLabel2 <- pbp %>% filter(special_teams_play == 1 & play == 1
                                      & play_type != "run" & play_type != "pass")
IncorrectPlayLabelID2 <- IncorrectPlayLabel2$play_id
pbp[IncorrectPlayLabelID2, "special"] <- 1
pbp[IncorrectPlayLabelID2, "play"] <- 0

IncorrectPuntLabel <- pbp %>% filter(special == 0 & play_type != "pass" & play_type != "run" & 
                                       (str_detect(pbp$desc, "(punts)") | str_detect(pbp$desc, "(punt is)")
                                        | str_detect(pbp$desc, "(Punt is)")))
IncorrectPuntLabelID <- IncorrectPuntLabel$play_id
pbp[IncorrectPuntLabelID, "special"] <- 1
pbp[IncorrectPuntLabelID, "play"] <- 0

IncorrectFGLabel <- pbp %>% filter(play_type == "no_play" & special == 0 & 
                                     !is.na(field_goal_result))
IncorrectFGLabelID <- IncorrectFGLabel$play_id
pbp[IncorrectFGLabelID, "special"] <- 1
pbp[IncorrectFGLabelID, "play"] <- 0

IncorrectPATLabel <- pbp %>% filter(play == 1 & rush == 0 & pass == 0 & play_type != "no_play")
IncorrectPATLabelID <- IncorrectPATLabel$play_id
pbp[IncorrectPATLabelID, "special"] <- 1
pbp[IncorrectPATLabelID, "play"] <- 0

IncorrectPATLabel2 <- pbp %>% filter(is.na(play_type_nfl) & play_type == "extra_point")
IncorrectPATLabelID2 <- IncorrectPATLabel2$play_id
pbp[IncorrectPATLabelID2, "play_type_nfl"] <- "XP_KICK"

Incorrect2PtLabel <- pbp %>% filter(two_point_attempt == 1 & play == 0 & 
                                      !str_detect(pbp$desc, "(Extra point)") & !str_detect(pbp$desc, "(extra point)"))
Incorrect2PtLabelID <- Incorrect2PtLabel$play_id
pbp[Incorrect2PtLabelID, "play"] <- 1
pbp[Incorrect2PtLabelID, "special"] <- 0

Incorrect2PtLabelPass <- pbp %>% filter(two_point_attempt == 1 & penalty == 1 & pass_attempt == 1 & 
                                          !str_detect(pbp$desc, "(Extra point)") & !str_detect(pbp$desc, "(extra point)"))
Incorrect2PtLabelPassID <- Incorrect2PtLabelPass$play_id
pbp[Incorrect2PtLabelPassID, "play_type"] <- "pass"

Incorrect2PtLabelRun <- pbp %>% filter(two_point_attempt == 1 & penalty == 1 & pass_attempt == 0 & 
                                         !str_detect(pbp$desc, "(Extra point)") & !str_detect(pbp$desc, "(extra point)"))
Incorrect2PtLabelRunID <- Incorrect2PtLabelRun$play_id
pbp[Incorrect2PtLabelRunID, "play_type"] <- "run"

pbp <- pbp %>% group_by(game_id, game_half) %>% 
  mutate(LastPlayOfHalf = as.numeric(play_id == max(play_id))) %>% 
  ungroup()

pbp <- pbp %>% group_by(game_id, game_half) %>% 
  mutate(FirstPlayOfHalf = as.numeric(play_id == min(play_id))) %>% 
  ungroup()

pbp <- pbp %>% group_by(game_id) %>% 
  mutate(FirstPlayOfGame = as.numeric(play_id == min(play_id))) %>% 
  ungroup()

pbp <- pbp %>% mutate(posteam_win = 
                        case_when(
                          (result > 0 & posteam == home_team) | (result < 0 & posteam == away_team) ~ 1,
                          (result < 0 & posteam == home_team) | ( result > 0 & posteam == away_team) ~ 0,
                          result == 0 ~ 0.5))

pbp <- pbp %>%
  mutate(EndGamePtDiff = ifelse(posteam_type == "home", result, (-1 * result)))

# CREATE THE "NewDrive" COLUMN
pbp <- pbp %>% mutate(LastPlayOfDrive = ifelse( 
  (is.na(td_team) &
     (punt_attempt %in% 1 | play_type %in% "punt" | (extra_point_attempt %in% 1 & (play_type != "no_play" | (str_detect(pbp$desc, "(enforced between downs)")))) | 
        play_type %in% "extra_point" |  two_point_attempt %in% 1 | (str_detect(pbp$desc, "(two-point)") & penalty %in% 0) | 
        (str_detect(pbp$desc, "(TWO-POINT)") & penalty %in% 0) | (str_detect(pbp$desc, "(Two-point)") & penalty %in% 0) |
        (str_detect(pbp$desc, "(Two-Point)") & penalty %in% 0) | field_goal_result %in% "missed" | field_goal_result %in% "blocked" |
        field_goal_result %in% "made" | field_goal_attempt %in% 1 | interception %in% 1 | safety %in% 1 |
        fumble_lost %in% 1 | fourth_down_failed %in% 1 | LastPlayOfHalf %in% 1)), 1, 0)
)

pbp <- pbp %>%
  mutate(NewDrive = 0)

pbp <- pbp %>% group_by(game_id) %>% 
  mutate(NewDrive = ifelse(FirstPlayOfGame == 1, 1, 
                           ifelse(lag(LastPlayOfDrive == 1), 1 + lag(NewDrive), lag(NewDrive)))) %>%
  ungroup()

pbp <- pbp %>% group_by(game_id) %>% 
  mutate(NewDrive = cumsum(NewDrive)) %>%
  ungroup()

# The middle number is whatever column NewDrive is in, just for re-ordering
pbp <- pbp %>% select(1:19, 377, 20:376)
pbp <- pbp %>% select(-"drive", -"fixed_drive")

pbp <- pbp %>% group_by(game_id, NewDrive) %>% 
  mutate(FirstPlayOfDrive = as.numeric(play_id == min(play_id))) %>% 
  ungroup()

pbp <- pbp %>% group_by(game_id, NewDrive) %>% 
  mutate(LastPlayOfDrive = as.numeric(play_id == max(play_id))) %>% 
  ungroup()

# This is to fix XPs with incorrect fixed_drive_result, EVEN PENALIZED/RE-DONE ONES
PATsToBeFixed <- pbp %>% filter(!fixed_drive_result %in% "Touchdown" & !fixed_drive_result %in% "Opp touchdown" &
                                  (play_type == "extra_point" | extra_point_attempt == 1 | two_point_attempt == 1 |
                                     (str_detect(pbp$desc, "(two-point)") & !play_type %in% "kickoff") | 
                                     (str_detect(pbp$desc, "(TWO-POINT)") & !play_type %in% "kickoff") | 
                                     (str_detect(pbp$desc, "(Two-point)") & !play_type %in% "kickoff") | 
                                     (str_detect(pbp$desc, "(Two-Point)") & !play_type %in% "kickoff") |
                                     (str_detect(pbp$desc, "(extra point)") & !play_type %in% "kickoff") | 
                                     (str_detect(pbp$desc, "(EXTRA POINT)") & !play_type %in% "kickoff") | 
                                     (str_detect(pbp$desc, "(Extra Point)") & !play_type %in% "kickoff") | 
                                     (str_detect(pbp$desc, "(Extra point)") & !play_type %in% "kickoff")))

OFFPATsToBeFixed <- pbp %>% filter(!fixed_drive_result %in% "Touchdown" & !fixed_drive_result %in% "Opp touchdown" &
                                     (play_type == "extra_point" | extra_point_attempt == 1 | two_point_attempt == 1 |
                                        (str_detect(pbp$desc, "(two-point)") & !play_type %in% "kickoff") | 
                                        (str_detect(pbp$desc, "(TWO-POINT)") & !play_type %in% "kickoff") | 
                                        (str_detect(pbp$desc, "(Two-point)") & !play_type %in% "kickoff") | 
                                        (str_detect(pbp$desc, "(Two-Point)") & !play_type %in% "kickoff") |
                                        (str_detect(pbp$desc, "(extra point)") & !play_type %in% "kickoff") | 
                                        (str_detect(pbp$desc, "(EXTRA POINT)") & !play_type %in% "kickoff") | 
                                        (str_detect(pbp$desc, "(Extra Point)") & !play_type %in% "kickoff") | 
                                        (str_detect(pbp$desc, "(Extra point)") & !play_type %in% "kickoff")) &
                                     (lag(td_team) == lag(posteam)))

OFFPATsToBeFixedVec <- OFFPATsToBeFixed$play_id
pbp[OFFPATsToBeFixedVec, "fixed_drive_result"] <- "Touchdown"
pbp[OFFPATsToBeFixedVec, "drive_end_transition"] <- "Touchdown"

DEFPATsToBeFixed <- pbp %>% filter(!fixed_drive_result %in% "Touchdown" & !fixed_drive_result %in% "Opp touchdown" &
                                     (play_type == "extra_point" | extra_point_attempt == 1 | two_point_attempt == 1 |
                                        (str_detect(pbp$desc, "(two-point)") & !play_type %in% "kickoff") | 
                                        (str_detect(pbp$desc, "(TWO-POINT)") & !play_type %in% "kickoff") | 
                                        (str_detect(pbp$desc, "(Two-point)") & !play_type %in% "kickoff") | 
                                        (str_detect(pbp$desc, "(Two-Point)") & !play_type %in% "kickoff") |
                                        (str_detect(pbp$desc, "(extra point)") & !play_type %in% "kickoff") | 
                                        (str_detect(pbp$desc, "(EXTRA POINT)") & !play_type %in% "kickoff") | 
                                        (str_detect(pbp$desc, "(Extra Point)") & !play_type %in% "kickoff") | 
                                        (str_detect(pbp$desc, "(Extra point)") & !play_type %in% "kickoff")) &
                                     (lag(td_team) != lag(posteam)))

DEFPATsToBeFixedVec <- DEFPATsToBeFixed$play_id
pbp[DEFPATsToBeFixedVec, "fixed_drive_result"] <- "Opp touchdown"
pbp[DEFPATsToBeFixedVec, "drive_end_transition"] <- "Opp touchdown"

MISCPATsToBeFixed <- PATsToBeFixed %>% 
  filter(!play_id %in% OFFPATsToBeFixedVec & !play_id %in% DEFPATsToBeFixedVec)
MISCPATsToBeFixedVec <- MISCPATsToBeFixed$play_id
pbp[MISCPATsToBeFixedVec, "fixed_drive_result"] <- "Opp touchdown"
pbp[MISCPATsToBeFixedVec, "drive_end_transition"] <- "Opp touchdown"

pbp <- pbp %>% group_by(game_id, game_half) %>% 
  mutate(LastDriveOfHalf = as.numeric(NewDrive == max(NewDrive))) %>% 
  ungroup()

pbp <- pbp %>% group_by(game_id) %>% 
  mutate(LastDriveOfGame = as.numeric(NewDrive == max(NewDrive))) %>% 
  ungroup()

WrongLabelLastDriveOfHalf <- pbp %>% filter(is.na(fixed_drive_result) & LastDriveOfHalf == 1)
WrongLabelLastDriveID <- WrongLabelLastDriveOfHalf$play_id
pbp[WrongLabelLastDriveID, "fixed_drive_result"] <- "End of half"

Last_Play_Of_Drive_Info <- pbp %>%
  group_by(game_id, NewDrive) %>%
  filter(play_id == max(play_id)) %>%
  ungroup() %>%
  select(game_id, NewDrive, REAL_drive_result = fixed_drive_result)

pbp <- pbp %>%
  merge(Last_Play_Of_Drive_Info, by = c("game_id", "NewDrive"))
pbp <- arrange(pbp, play_id)

pbp <- pbp %>% select(-"fixed_drive_result")
# The end number is how many columns pbp has, just for re-ordering
pbp <- pbp %>% select(1, 3:20, "NewDrive", 21:378)

# Now, repeat the process to make NewSeries variable
# One major flaw of original series is that PATs count as their own series
pbp <- pbp %>% mutate(LastPlayOfSeries = ifelse( 
  (is.na(td_team) &
     (LastPlayOfDrive %in% 1 | first_down %in% 1 | punt_attempt %in% 1 | play_type %in% "punt" | 
        (extra_point_attempt %in% 1 & (play_type != "no_play" | (str_detect(pbp$desc, "(enforced between downs)")))) | 
        play_type %in% "extra_point" |  two_point_attempt %in% 1 | (str_detect(pbp$desc, "(two-point)") & penalty %in% 0) | 
        (str_detect(pbp$desc, "(TWO-POINT)") & penalty %in% 0) | (str_detect(pbp$desc, "(Two-point)") & penalty %in% 0) |
        (str_detect(pbp$desc, "(Two-Point)") & penalty %in% 0) | field_goal_result %in% "missed" | field_goal_result %in% "blocked" |
        field_goal_result %in% "made" | field_goal_attempt %in% 1 | interception %in% 1 | safety %in% 1 |
        fumble_lost %in% 1 | fourth_down_failed %in% 1 | LastPlayOfHalf %in% 1)), 1, 0)
)

pbp <- pbp %>%
  mutate(NewSeries = 0)

pbp <- pbp %>% group_by(game_id) %>% 
  mutate(NewSeries = ifelse(FirstPlayOfGame == 1, 1, 
                            ifelse(lag(LastPlayOfSeries == 1), 1 + lag(NewSeries), lag(NewSeries)))) %>%
  ungroup()

pbp <- pbp %>% group_by(game_id) %>% 
  mutate(NewSeries = cumsum(NewSeries)) %>%
  ungroup()

# The middle number gets replaced with whatever column NewSeries is, for re-ordering
pbp <- pbp %>% select(1:299, 380, 300:379)
# Can take out column we don't need
pbp <- pbp %>% select(-"series")

SeriesResult_Wrong_PATs <- pbp %>% filter(is.na(series_result)) %>% 
  filter(play_type == "extra_point" | extra_point_attempt == 1 | two_point_attempt == 1 |
           (str_detect(desc, "(two-point)") & !play_type %in% "kickoff") | 
           (str_detect(desc, "(TWO-POINT)") & !play_type %in% "kickoff") | 
           (str_detect(desc, "(Two-point)") & !play_type %in% "kickoff") | 
           (str_detect(desc, "(Two-Point)") & !play_type %in% "kickoff") |
           (str_detect(desc, "(two point)") & !play_type %in% "kickoff") | 
           (str_detect(desc, "(TWO POINT)") & !play_type %in% "kickoff") | 
           (str_detect(desc, "(Two point)") & !play_type %in% "kickoff") | 
           (str_detect(desc, "(Two Point)") & !play_type %in% "kickoff") |
           (str_detect(desc, "(extra point)") & !play_type %in% "kickoff") | 
           (str_detect(desc, "(EXTRA POINT)") & !play_type %in% "kickoff") | 
           (str_detect(desc, "(Extra Point)") & !play_type %in% "kickoff") | 
           (str_detect(desc, "(Extra point)") & !play_type %in% "kickoff"))
SeriesResult_Wrong_PATs_Vec <- SeriesResult_Wrong_PATs$play_id

SeriesResult_PATs_OffTD <- SeriesResult_Wrong_PATs %>%
  filter(REAL_drive_result == "Touchdown")
SeriesResult_PATs_OffTD_Vec <- SeriesResult_PATs_OffTD$play_id

SeriesResult_PATs_DefTD <- SeriesResult_Wrong_PATs %>%
  filter(REAL_drive_result == "Opp touchdown")
SeriesResult_PATs_DefTD_Vec <- SeriesResult_PATs_DefTD$play_id

pbp[SeriesResult_PATs_OffTD_Vec, "series_result"] <- "Touchdown"
pbp[SeriesResult_PATs_DefTD_Vec, "series_result"] <- "Opp touchdown"

SeriesResult_ShouldBeEndOfHalf <- pbp %>% filter(is.na(series_result) & LastPlayOfSeries == 1)
SeriesResult_ShouldBeEndOfHalf_Vec <- SeriesResult_ShouldBeEndOfHalf$play_id
pbp[SeriesResult_ShouldBeEndOfHalf_Vec, "series_result"] <- "End of half"

# Now, address remainder of the incorrect series_result with group_by
Last_Play_Of_Series_Info <- pbp %>%
  group_by(game_id, NewSeries) %>%
  filter(play_id == max(play_id)) %>%
  ungroup() %>%
  select(game_id, NewSeries, END_series_result = series_result)

pbp <- pbp %>%
  merge(Last_Play_Of_Series_Info, by = c("game_id", "NewSeries"))
pbp <- arrange(pbp, play_id)

Disagreements_Series_Result <- pbp %>% filter(
  !is.na(series_result) & END_series_result != series_result) %>% 
  select(1:29, "series_result", "END_series_result")
Disagreements_Series_Result_Vec <- Disagreements_Series_Result$play_id

Disagreements_Series_Result_SCORING <- Disagreements_Series_Result %>%
  filter(series_result == "Opp touchdown" | series_result == "Touchdown" | series_result == "Field goal")
Disagreements_Series_Result_SCORING_Vec <- Disagreements_Series_Result_SCORING$play_id

Disagreements_Series_Result_NonSCORING <- Disagreements_Series_Result %>%
  filter(!play_id %in% Disagreements_Series_Result_SCORING_Vec)
Disagreements_Series_Result_NonSCORING_Vec <- Disagreements_Series_Result_NonSCORING$play_id

pbp[Disagreements_Series_Result_SCORING_Vec, "END_series_result"] <- pbp[Disagreements_Series_Result_SCORING_Vec, "series_result"]
pbp[Disagreements_Series_Result_NonSCORING_Vec, "series_result"] <- pbp[Disagreements_Series_Result_NonSCORING_Vec, "END_series_result"]

# NOW, fix these: View(pbp %>% filter(is.na(series_result)))
pbp <- pbp %>% 
  mutate(series_result = (ifelse(!is.na(series_result), series_result, END_series_result)))
# THEN, delete one of the columns (don't need both) and fix column order
pbp <- pbp %>% select(-"END_series_result")
pbp <- pbp %>% select(1, 3:265, "NewSeries", 266:379)

PuntReturnTDs <- pbp %>% 
  filter(!is.na(td_team) & td_team != posteam & (play_type == "punt" | punt_attempt == 1) )
PuntReturnTDVector <- PuntReturnTDs$play_id

PuntOffensiveTDs <- pbp %>% 
  filter(!is.na(td_team) & td_team == posteam & (play_type == "punt" | punt_attempt == 1))
PuntOffensiveTDVector <- PuntOffensiveTDs$play_id

KickReturnTDs <- pbp %>% 
  filter(!is.na(td_team) & td_team == posteam & (play_type == "kickoff" | kickoff_attempt == 1))
KickReturnTDVector <- KickReturnTDs$play_id

OffKickoffTDs <- pbp %>% 
  filter(!is.na(td_team) & td_team != posteam & (play_type == "kickoff" | kickoff_attempt == 1))
OffKickoffTDVector <- OffKickoffTDs$play_id

FGReturnTDs <- pbp %>%
  filter( (field_goal_result == "missed" | field_goal_result == "blocked" | field_goal_attempt == 1) & 
            !is.na(td_team) & td_team != posteam)
FGReturnTDVector <- FGReturnTDs$play_id

AllSpecialTDs <- pbp %>% 
  filter( (play_type == "kickoff" | play_type == "punt" | punt_attempt == 1 | kickoff_attempt == 1 |
             field_goal_result == "missed" | field_goal_result == "blocked" | field_goal_attempt == 1) 
          & !is.na(td_team))
AllSpecialTDVector <- AllSpecialTDs$play_id

OffensiveTDs <- pbp %>%
  filter(!is.na(td_team) & (pass_touchdown == 1 | rush_touchdown == 1 |
                              ( !play_id %in% AllSpecialTDVector & posteam_score_post > posteam_score)) )
OffensiveTDsVector <- OffensiveTDs$play_id

DefensiveTDs <- pbp %>%
  filter(!is.na(td_team) & !play_id %in% OffensiveTDsVector & !play_id %in% AllSpecialTDVector)
DefensiveTDsVector <- DefensiveTDs$play_id

AllDefSpecialTeamTDs <- rbind(AllSpecialTDs, DefensiveTDs)
DSTTDsVector <- AllDefSpecialTeamTDs$play_id

pbp <- pbp %>% 
  mutate(Kneeldown = (ifelse(play_type == "qb_kneel" & qb_kneel == 1, 1, 0)),
         PassIntended = (ifelse(pass_attempt == 1 | pass == 1, 1, 0)),
         Punt = (ifelse(punt_attempt == 1 | play_type == "punt", 1, 0)),
         NoScorePunt = (ifelse( (punt_attempt == 1 | play_type == "punt")
                                & is.na(td_team), 1, 0)),
         PuntReturnTD = (ifelse(play_id %in% PuntReturnTDVector, 1, 0)),
         OffPuntTD = (ifelse(play_id %in% PuntOffensiveTDVector, 1, 0)),
         KickReturnTD = (ifelse(play_id %in% KickReturnTDVector, 1, 0)),
         OffKickoffTD = (ifelse(play_id %in% OffKickoffTDVector, 1, 0)),
         FGReturnTD = (ifelse(play_id %in% FGReturnTDVector, 1, 0)),
         SpecialTD = (ifelse(play_id %in% AllSpecialTDVector, 1, 0)),
         OffensiveTD = (ifelse(play_id %in% OffensiveTDsVector, 1, 0)),
         DefensiveTD = (ifelse(play_id %in% DefensiveTDsVector, 1, 0)),
         DSTTD = (ifelse(play_id %in% DSTTDsVector, 1, 0)),
         MadeFG = (ifelse( (field_goal_result == "made" & field_goal_attempt == 1), 1, 0)),
         OffTurnover = (ifelse( ((interception == 1) | 
                                   (punt_attempt == 0 & fumble_lost == 1)), 1, 0)))
# Safeties are NOT classified as turnovers, likewise for turnover on downs

Offsets <- pbp %>% filter((play_type_nfl == "PENALTY" & is.na(play_type)) |
                            (str_detect(desc, "(No Play)") & (str_detect(desc, "(offset)"))) |
                            (str_detect(desc, "(No Play)") & (str_detect(desc, "(Offset)"))) |
                            (str_detect(desc, "(No play)") & (str_detect(desc, "(offset)"))) |
                            (str_detect(desc, "(No play)") & (str_detect(desc, "(Offset)"))))
OffsetID <- Offsets$play_id
pbp <- pbp %>% filter(!play_id %in% OffsetID)
pbp$play_id <- 1:nrow(pbp)

# After all this data cleansing, isolate plays since 2001 for project
pbp_Since2001 <- pbp %>% filter(season > 2000)
rm(pbp) # this is to conserve memory

# These are for if/when we want to make confidence intervals
# Recall, Bernoulli is binary variable (i.e. use for proportions)
SE_Bernoulli <- function(x){
  mu <- mean(x, na.rm = TRUE)
  return( sqrt( (mu*(1 - mu))/(length(x)) ) )
}

ConfBand_Bernoulli <- function(x) {
  return(1.96*SE_Bernoulli(x))
}

upper_Bernoulli <- function(x) {
  mean(x, na.rm = TRUE) + ConfBand_Bernoulli(x)
}

lower_Bernoulli <- function(x) {
  mean(x, na.rm = TRUE) - ConfBand_Bernoulli(x)
}

# Make separate formula for continuous variables
SE_Continuous <- function(x){
  SD <- sd(x, na.rm = TRUE)
  return( SD/sqrt((length(x))) )
}

ConfBand_Continuous <- function(x) {
  return(1.96*SE_Continuous(x))
}

upper_Continuous <- function(x) {
  mean(x, na.rm = TRUE) + ConfBand_Continuous(x)
}

lower_Continuous <- function(x) {
  mean(x, na.rm = TRUE) - ConfBand_Continuous(x)
}

pbp_Since2001_ProjectPlays <- pbp_Since2001 %>% filter(!is.na(down) & play == 1)
pbp_Since2001_ProjectPlays <- pbp_Since2001_ProjectPlays %>% 
  filter(play_type != "qb_kneel" & play_type != "qb_spike")
# No special teams plays, or kneels, or spikes, or 2-PT Conv here
pbp_Since2001_ProjectPlays <- pbp_Since2001_ProjectPlays %>% 
  filter(score_differential > 0 & score_differential < 9)
# Now, we've made it only one-possession games
pbp_Since2001_ProjectPlays$play_id <- 1:nrow(pbp_Since2001_ProjectPlays)

pbp_Since2001_ProjectPlays <- pbp_Since2001_ProjectPlays %>% 
  mutate(PlayType = ifelse(pass == 1, "Pass", "Rush"))

pbp_Since2001_ProjectPlays <- pbp_Since2001_ProjectPlays %>% 
  mutate(DefHasTimeout = ifelse(defteam_timeouts_remaining, 1, 0))

# These should be, and are, empty
# View(pbp_Since2001_ProjectPlays %>% filter(pass == 0, rush == 0))
# View(pbp_Since2001_ProjectPlays %>% filter(play_type != "no_play" & pass == 0 & rush == 0))

# Remove the penalties that aren't classified as pass or rush
Penalties_NoClassification <- pbp_Since2001_ProjectPlays %>% 
  filter(play_type_nfl == "PENALTY" & pass == 0 & rush == 0)
Penalties_NoClassificationID <- Penalties_NoClassification$play_id
pbp_Since2001_ProjectPlays <- pbp_Since2001_ProjectPlays %>% filter(!play_id %in% Penalties_NoClassificationID)
pbp_Since2001_ProjectPlays$play_id <- 1:nrow(pbp_Since2001_ProjectPlays)

pbp_Since2001_ProjectPlays <- pbp_Since2001_ProjectPlays %>%
  select(-"FirstPlayOfDrive", -"LastPlayOfDrive")

pbp_Since2001_ProjectPlays <- pbp_Since2001_ProjectPlays %>% group_by(game_id, NewDrive) %>% 
  mutate(FirstPlayOfDrive = as.numeric(play_id == min(play_id))) %>% 
  ungroup()

pbp_Since2001_ProjectPlays <- pbp_Since2001_ProjectPlays %>% group_by(game_id, NewDrive) %>% 
  mutate(LastPlayOfDrive = as.numeric(play_id == max(play_id))) %>% 
  ungroup()

pbp_Since2001_ProjectPlays <- pbp_Since2001_ProjectPlays %>% group_by(game_id, NewSeries) %>% 
  mutate(FirstPlayOfSeries = as.numeric(play_id == min(play_id))) %>% 
  ungroup()

pbp_Since2001_ProjectPlays <- pbp_Since2001_ProjectPlays %>% group_by(game_id, NewSeries) %>% 
  mutate(LastPlayOfSeries = as.numeric(play_id == max(play_id))) %>% 
  ungroup()

pbp_Since2001_ProjectPlays <- pbp_Since2001_ProjectPlays %>%
  mutate(NetPoints = (7 * OffensiveTD) - (7 * DefensiveTD) + (7 * OffPuntTD)
         - (7 * PuntReturnTD) - (7 * FGReturnTD) + (3 * MadeFG) - (2 * safety))

pbp_Since2001_ProjectPlays <- pbp_Since2001_ProjectPlays %>% 
  mutate(NoScoreTurnover = (ifelse( is.na(td_team) & OffTurnover > 0, 1, 0)),
         OffPenaltyOrTO = ifelse(( (penalty > 0 & posteam == penalty_team) | OffTurnover > 0), 1, 0),
         DefPenaltyNoTO = ifelse((penalty > 0 & OffTurnover == 0 & defteam == penalty_team), 1, 0),
         GRAPHTimeouts = case_when(defteam_timeouts_remaining == 0 ~ "Def Timeouts = 0",
                                   defteam_timeouts_remaining == 1 ~ "Def Timeouts = 1",
                                   defteam_timeouts_remaining == 2 ~ "Def Timeouts = 2",
                                   defteam_timeouts_remaining == 3 ~ "Def Timeouts = 3"))

pbp_Since2001_ProjectPlays_Last2Min <- pbp_Since2001_ProjectPlays %>% 
  filter(half_seconds_remaining <= 120, game_half == "Half2")

pbp_Since2001_ProjectPlays_Last4Min <- pbp_Since2001_ProjectPlays %>% 
  filter(half_seconds_remaining <= 240, game_half == "Half2")

pbp_Since2001_ProjectPlays_Last2Min$half_seconds_remaining <- 
  ifelse((pbp_Since2001_ProjectPlays_Last2Min$half_seconds_remaining) > 0, 
         (pbp_Since2001_ProjectPlays_Last2Min$half_seconds_remaining), 1)

pbp_Since2001_ProjectPlays_Last2Min$quarter_seconds_remaining <- 
  ifelse((pbp_Since2001_ProjectPlays_Last2Min$quarter_seconds_remaining) > 0, 
         (pbp_Since2001_ProjectPlays_Last2Min$quarter_seconds_remaining), 1)

pbp_Since2001_ProjectPlays_Last2Min$game_seconds_remaining <- 
  ifelse((pbp_Since2001_ProjectPlays_Last2Min$game_seconds_remaining) > 0, 
         (pbp_Since2001_ProjectPlays_Last2Min$game_seconds_remaining), 1)

pbp_Since2001_ProjectPlays_Last2Min <-
  pbp_Since2001_ProjectPlays_Last2Min %>% mutate(
    ADJTimeLeft = (ifelse(game_seconds_remaining <= 120, 
                          (game_seconds_remaining + (40 * defteam_timeouts_remaining)),
                          (40 + (game_seconds_remaining + (40 * defteam_timeouts_remaining)))  
    )))

pbp_Since2001_ProjectPlays_Last2Min <- pbp_Since2001_ProjectPlays_Last2Min %>%
  mutate(REALTimeBin = ifelse(game_seconds_remaining <= 40, "0:01 to 0:40", 
                              ifelse(game_seconds_remaining %in% 41:80, "0:41 to 1:20", "1:21 to 2:00")))

pbp_Since2001_ProjectPlays_Last2Min <- pbp_Since2001_ProjectPlays_Last2Min %>%
  mutate(ADJTimeBin = ifelse(ADJTimeLeft <= 60, "0:01 to 1:00", 
                             ifelse(ADJTimeLeft %in% 61:120, "1:01 to 2:00", 
                                    ifelse(ADJTimeLeft %in% 121:180, "2:01 to 3:00","3:01 to 4:00"))))

pbp_Since2001_ProjectPlays_Last2Min <- pbp_Since2001_ProjectPlays_Last2Min %>%
  mutate(GRAPHADJTimeBin = ifelse(ADJTimeLeft <= 60, "ADJ Time: 0:01 to 1:00", 
                                  ifelse(ADJTimeLeft %in% 61:120, "ADJ Time: 1:01 to 2:00", 
                                         ifelse(ADJTimeLeft %in% 121:180, "ADJ Time: 2:01 to 3:00","ADJ Time: 3:01 to 4:00"))))

pbp_Since2001_ProjectPlays_Last2Min <- pbp_Since2001_ProjectPlays_Last2Min %>%
  mutate(PositionBin = ifelse(yardline_100 >= 80, "80+", 
                              ifelse(yardline_100 %in% 60:79, "60-79", 
                                     ifelse(yardline_100 %in% 40:59, "40-59", "1-39"))))

pbp_Since2001_ProjectPlays_Last2Min <- pbp_Since2001_ProjectPlays_Last2Min %>%
  mutate(GRAPHDown = case_when(down == 1 ~ "1st Down",
                               down == 2 ~ "2nd Down",
                               down == 3 ~ "3rd Down",
                               down == 4 ~ "4th Down"))

# For play choice: can use the play_type_nfl columns or pass/rush columns
# The difference: scrambles count as play_type_nfl == RUSH, but pass == 1
# Therefore, let's go with PASS/RUSH

# MAKE SURE TO DISCUSS ISSUE OF CLASSIFYING PLAYS AS RUN OR PASS, EXCLUSIVELY

# Add stratification by distance to go:
pbp_Since2001_ProjectPlays_Last2Min <- pbp_Since2001_ProjectPlays_Last2Min %>%
  mutate(RoughDist = factor(ifelse(ydstogo <= 2, "1-2", 
                            ifelse(ydstogo %in% 3:6, "3-6", 
                                   ifelse(ydstogo %in% 7:9, "7-9", "10+"))), 
      ordered = TRUE, levels = c("1-2", "3-6", "7-9", "10+")))

FirstDownOnPlay_DistAndDown_Last2Min <- pbp_Since2001_ProjectPlays_Last2Min %>%
  group_by(PlayType, GRAPHDown, RoughDist) %>%
  summarize(n = n(), FirstDownRate = mean(first_down))
# View(FirstDownOnPlay_DistAndDown_Last2Min)
FirstDownOnPlay_Dist_Last2Min <- pbp_Since2001_ProjectPlays_Last2Min %>%
  group_by(PlayType, RoughDist) %>%
  summarize(n = n(), FirstDownRate = mean(first_down))
# View(arrange(FirstDownOnPlay_Dist_Last2Min, RoughDist))
# sum(FirstDownOnPlay_Dist_Last2Min$n); it's 2773

FirstDownOnPlay_Dist_Last2Min %>%
  ggplot(aes(x = RoughDist, y = FirstDownRate, fill = PlayType)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(x = "Yards to Go", y = "First Down Rate",
       title = "First Down Rate in Last 2 Min of Game, by Distance and Pass/Run",
       subtitle = "2001-2020; Offense Leading by One Possession (n = 2773)",
       caption = "Data from nflfastR",
       fill = "Play Type") +
  theme(plot.title = element_text(size = 10, hjust = 0.5),
        plot.subtitle = element_text(size = 8, hjust = 0.5))

FirstDownOnPlay_Dist_Last2Min_CIVersion <- pbp_Since2001_ProjectPlays_Last2Min %>%
  group_by(PlayType, RoughDist) %>%
  summarize(n = n(), FirstDownRate = mean(first_down),
            Lower = lower_Bernoulli(first_down), Upper = upper_Bernoulli(first_down))
# View(FirstDownOnPlay_Dist_Last2Min_CIVersion)

FirstDownOnPlay_Dist_Last2Min_CIVersion %>%
  ggplot(aes(x = RoughDist, y = FirstDownRate, fill = PlayType)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(x = "Yards to Go", y = "First Down Rate",
       title = "First Down Rate in Last 2 Min of Game, by Distance and Pass/Run",
       subtitle = "2001-2020; Offense Leading by One Possession (n = 2773)",
       caption = "Data from nflfastR",
       fill = "Play Type") +
  geom_errorbar(aes(ymin = Lower, ymax = Upper), position = "dodge") +
  theme(plot.title = element_text(size = 10, hjust = 0.5),
        plot.subtitle = element_text(size = 8, hjust = 0.5))

# Visual mess/smaller samples are why we don't use "every down" one
# But still will use 3rd down only one later

# Compare these to plays outside the last 2 minutes, using pbp_Since2001
# Create pbp_Since2001_AnyPtOfGame to take out special teams, 2-pt conv, etc.
pbp_Since2001_AnyPtOfGame <- pbp_Since2001 %>% filter(!is.na(down) & play == 1) %>%
  filter(play_type != "qb_kneel" & play_type != "qb_spike") %>%
  filter(play_type_nfl != "PENALTY" | pass == 1 | rush == 1)

pbp_Since2001_AnyPtOfGame  <- pbp_Since2001_AnyPtOfGame %>%
  mutate(RoughDist = factor(ifelse(ydstogo <= 2, "1-2", 
                                   ifelse(ydstogo %in% 3:6, "3-6", 
                                          ifelse(ydstogo %in% 7:9, "7-9", "10+"))), 
                            ordered = TRUE, levels = c("1-2", "3-6", "7-9", "10+")))

pbp_Since2001_AnyPtOfGame <- pbp_Since2001_AnyPtOfGame %>%
  mutate(PositionBin = ifelse(yardline_100 >= 80, "80+", 
                              ifelse(yardline_100 %in% 60:79, "60-79", 
                                     ifelse(yardline_100 %in% 40:59, "40-59", "1-39"))))

pbp_Since2001_AnyPtOfGame <- pbp_Since2001_AnyPtOfGame %>%
  mutate(GRAPHDown = case_when(down == 1 ~ "1st Down",
                               down == 2 ~ "2nd Down",
                               down == 3 ~ "3rd Down",
                               down == 4 ~ "4th Down"))

pbp_Since2001_AnyPtOfGame <- pbp_Since2001_AnyPtOfGame %>% 
  mutate(PlayType = ifelse(pass == 1, "Pass", "Rush"))

FirstDownOnPlay_DistAndDown_AnyPtOfGame <- pbp_Since2001_AnyPtOfGame %>%
  group_by(PlayType, GRAPHDown, RoughDist) %>%
  summarize(n = n(), FirstDownRate = mean(first_down))
# View(FirstDownOnPlay_DistAndDown_AnyPtOfGame)
FirstDownOnPlay_Dist_AnyPtOfGame <- pbp_Since2001_AnyPtOfGame %>%
  group_by(PlayType, RoughDist) %>%
  summarize(n = n(), FirstDownRate = mean(first_down))
# View(arrange(FirstDownOnPlay_Dist_AnyPtOfGame, RoughDist))
# sum(FirstDownOnPlay_Dist_AnyPtOfGame$n); it's 693306

FirstDownOnPlay_Dist_AnyPtOfGame %>%
  ggplot(aes(x = RoughDist, y = FirstDownRate, fill = PlayType)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(x = "Yards to Go", y = "First Down Rate",
       title = "First Down Rate, by Distance and Pass/Run",
       subtitle = "2001-2020; At Any Point of Game (n = 693306)",
       caption = "Data from nflfastR",
       fill = "Play Type") +
  theme(plot.title = element_text(size = 10, hjust = 0.5),
        plot.subtitle = element_text(size = 8, hjust = 0.5))

# No need for confidence intervals here, b/c huge sample = more reliability
# Visual mess/smaller samples are why we don't use "every down" one
# But still will use 3rd down only one later

# Now, we isolate 3rd downs
FirstDownOnPlay_3rdDown_Dist_Last2Min <- pbp_Since2001_ProjectPlays_Last2Min %>%
  filter(down == 3) %>% group_by(PlayType, RoughDist) %>%
  summarize(n = n(), FirstDownRate = mean(first_down))
# View(arrange(FirstDownOnPlay_3rdDown_Dist_Last2Min, RoughDist))
# sum(FirstDownOnPlay_3rdDown_Dist_Last2Min$n); it's 978

FirstDownOnPlay_3rdDown_Dist_Last2Min %>%
  ggplot(aes(x = RoughDist, y = FirstDownRate, fill = PlayType)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(x = "Yards to Go", y = "First Down Rate",
       title = "First Down Rate on 3rd Down in Final 2 Min, by Distance and Pass/Run",
       subtitle = "2001-2020; Offense Leading by One Possession (n = 978)",
       caption = "Data from nflfastR",
       fill = "Play Type") +
  theme(plot.title = element_text(size = 9.5, hjust = 0.5),
        plot.subtitle = element_text(size = 8, hjust = 0.5))
# KEY OBSERVATION: Pass more effective than usual on 3rd and short/medium

FirstDownOnPlay_3rdDown_Dist_Last2Min_CIVersion <- pbp_Since2001_ProjectPlays_Last2Min %>%
  filter(down == 3) %>% group_by(PlayType, RoughDist) %>%
  summarize(n = n(), FirstDownRate = mean(first_down),
            Upper = upper_Bernoulli(first_down), Lower = lower_Bernoulli(first_down))

FirstDownOnPlay_3rdDown_Dist_Last2Min_CIVersion %>%
  ggplot(aes(x = RoughDist, y = FirstDownRate, fill = PlayType)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(x = "Yards to Go", y = "First Down Rate",
       title = "First Down Rate on 3rd Down in Final 2 Min, by Distance and Pass/Run",
       subtitle = "2001-2020; Offense Leading by One Possession (n = 978)",
       caption = "Data from nflfastR",
       fill = "Play Type") +
  geom_errorbar(aes(ymin = Lower, ymax = Upper), position = "dodge") +
  theme(plot.title = element_text(size = 9.5, hjust = 0.5),
        plot.subtitle = element_text(size = 8, hjust = 0.5))

# Compare these to 3rd downs at any point of game
FirstDownOnPlay_3rdDown_Dist_AnyPtOfGame <- pbp_Since2001_AnyPtOfGame %>%
  filter(down == 3) %>% group_by(PlayType, RoughDist) %>%
  summarize(n = n(), FirstDownRate = mean(first_down))
# View(arrange(FirstDownOnPlay_3rdDown_Dist_AnyPtOfGame, RoughDist))
# sum(FirstDownOnPlay_3rdDown_Dist_AnyPtOfGame$n); it's 146956

FirstDownOnPlay_3rdDown_Dist_AnyPtOfGame %>%
  ggplot(aes(x = RoughDist, y = FirstDownRate, fill = PlayType)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(x = "Yards to Go", y = "First Down Rate",
       title = "First Down Conversion Rate on 3rd Down, by Distance and Pass/Run",
       subtitle = "2001-2020; At Any Point of Game (n = 146956)",
       caption = "Data from nflfastR",
       fill = "Play Type") +
  theme(plot.title = element_text(size = 9.5, hjust = 0.5),
        plot.subtitle = element_text(size = 8, hjust = 0.5))
# Also can do without conf intervals here, b/c big sample

# Could have likelihood of getting a first down on that series (from 1st and 10)
# But, extremely small samples for passing in final 2 minutes here (so don't use)
FirstDownOnSeries_FieldPos_Last2Min <- pbp_Since2001_ProjectPlays_Last2Min %>% 
  filter(down == 1, ydstogo == 10) %>%
  group_by(PlayType, PositionBin) %>%
  summarize(n = n(), Series1stDown = mean(series_success))
# View(FirstDownOnSeries_FieldPos_Last2Min)
# sum(FirstDownOnSeries_FieldPos_Last2Min$n)

WinRate_3rdDown_Dist_Last2Min <- pbp_Since2001_ProjectPlays_Last2Min %>%
  filter(down == 3) %>% group_by(PlayType, RoughDist) %>%
  summarize(n = n(), WinRate = mean(posteam_win))
# View(arrange(WinRate_3rdDown_Dist_Last2Min, RoughDist))
# sum(WinRate_3rdDown_Dist_Last2Min$n); it's 978
# Keep eye on pretty small sample (16) for passes on 3rd and 1-2

WinRate_3rdDown_Dist_Last2Min %>%
  ggplot(aes(x = RoughDist, y = WinRate, fill = PlayType)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(x = "Yards to Go", y = "Win Rate",
       title = "Win Rate After 3rd Downs in Final 2 Min, by Distance and Pass/Run",
       subtitle = "2001-2020; Offense Leading by One Possession (n = 978)",
       caption = "Data from nflfastR",
       fill = "Play Type") +
  theme(plot.title = element_text(size = 10, hjust = 0.5),
        plot.subtitle = element_text(size = 8, hjust = 0.5))

WinRate_3rdDown_Dist_Last2Min_CIVersion <- pbp_Since2001_ProjectPlays_Last2Min %>%
  filter(down == 3) %>% group_by(PlayType, RoughDist) %>%
  summarize(n = n(), WinRate = mean(posteam_win),
            Upper = upper_Bernoulli(posteam_win), Lower = lower_Bernoulli(posteam_win))

WinRate_3rdDown_Dist_Last2Min_CIVersion %>%
  ggplot(aes(x = RoughDist, y = WinRate, fill = PlayType)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(x = "Yards to Go", y = "Win Rate",
       title = "Win Rate After 3rd Downs in Final 2 Min, by Distance and Pass/Run",
       subtitle = "2001-2020; Offense Leading by One Possession (n = 978)",
       caption = "Data from nflfastR",
       fill = "Play Type") +
  geom_errorbar(aes(ymin = Lower, ymax = Upper), position = "dodge") +
  theme(plot.title = element_text(size = 10, hjust = 0.5),
        plot.subtitle = element_text(size = 8, hjust = 0.5))

# Now, do the version that separates by defensive timeouts
WinRate_3rdDown_Dist_Last2Min_NoDefTimeouts_CIVersion <- pbp_Since2001_ProjectPlays_Last2Min %>%
  filter(down == 3, defteam_timeouts_remaining == 0) %>% group_by(PlayType, RoughDist) %>%
  summarize(n = n(), WinRate = mean(posteam_win),
            Upper = upper_Bernoulli(posteam_win), Lower = lower_Bernoulli(posteam_win))
# View(arrange(WinRate_3rdDown_Dist_Last2Min_NoDefTimeouts_CIVersion, RoughDist))
# sum(WinRate_3rdDown_Dist_Last2Min_NoDefTimeouts_CIVersion$n); it's 666

WinRate_3rdDown_Dist_Last2Min_NoDefTimeouts_CIVersion %>%
  ggplot(aes(x = RoughDist, y = WinRate, fill = PlayType)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(x = "Yards to Go", y = "Win Rate",
       title = "Win Rate After 3rd Downs in Final 2 Min, by Distance and Pass/Run",
       subtitle = "2001-2020; Offense Up by One Score & Defense has 0 TOs (n = 666)",
       caption = "Data from nflfastR",
       fill = "Play Type") +
  geom_errorbar(aes(ymin = Lower, ymax = Upper), position = "dodge") +
  theme(plot.title = element_text(size = 10, hjust = 0.5),
        plot.subtitle = element_text(size = 8, hjust = 0.5))

WinRate_3rdDown_Dist_Last2Min_DefHasTimeouts_CIVersion <- pbp_Since2001_ProjectPlays_Last2Min %>%
  filter(down == 3, defteam_timeouts_remaining > 0) %>% group_by(PlayType, RoughDist) %>%
  summarize(n = n(), WinRate = mean(posteam_win),
            Upper = upper_Bernoulli(posteam_win), Lower = lower_Bernoulli(posteam_win))
# View(arrange(WinRate_3rdDown_Dist_Last2Min_DefHasTimeouts_CIVersion, RoughDist))
# sum(WinRate_3rdDown_Dist_Last2Min_DefHasTimeouts_CIVersion$n); it's 312

WinRate_3rdDown_Dist_Last2Min_DefHasTimeouts_CIVersion %>%
  ggplot(aes(x = RoughDist, y = WinRate, fill = PlayType)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(x = "Yards to Go", y = "Win Rate",
       title = "Win Rate After 3rd Downs in Final 2 Min, by Distance and Pass/Run",
       subtitle = "2001-2020; Offense Up by One Score & Defense has 1+ Timeout (n = 312)",
       caption = "Data from nflfastR",
       fill = "Play Type") +
  geom_errorbar(aes(ymin = Lower, ymax = Upper), position = "dodge") +
  theme(plot.title = element_text(size = 10, hjust = 0.5),
        plot.subtitle = element_text(size = 8, hjust = 0.5))

# We could do same thing for 1st and 10 too
# But, extremely small sample size for 1st and 10 passes in final 2 min (don't use)
WinRate_ProjPlays_1stAnd10_Last2Min <- pbp_Since2001_ProjectPlays_Last2Min %>%
  filter(down == 1, ydstogo == 10) %>% group_by(PlayType, PositionBin) %>%
  summarize(n = n(), WinRate = mean(posteam_win))
# View(WinRate_ProjPlays_1stAnd10_Last2Min)
# sum(WinRate_ProjPlays_1stAnd10_Last2Min$n); it's 341

# Also could do so for all downs, but prob not fair (1st and 10 not equiv to 3rd and 10)
# And if we facet-wrap by down, sample size may be too small
WinRate_AllDowns_DownAndDist_Last2Min <- pbp_Since2001_ProjectPlays_Last2Min %>%
  group_by(PlayType, GRAPHDown, RoughDist) %>%
  summarize(n = n(), posteam_win = mean(posteam_win))
# View(WinRate_AllDowns_DownAndDist_Last2Min)
WinRate_AllDowns_Dist_Last2Min <- pbp_Since2001_ProjectPlays_Last2Min %>%
  group_by(PlayType, RoughDist) %>%
  summarize(n = n(), posteam_win = mean(posteam_win))
# View(arrange(WinRate_AllDowns_Dist_Last2Min, RoughDist))
# sum(WinRate_AllDowns_Dist_Last2Min$n); it's 1444

WinRate_AllDowns_Dist_Last2Min %>%
  ggplot(aes(x = RoughDist, y = posteam_win, fill = PlayType)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(x = "Yards to Go", y = "Win Rate",
       title = "Does Offense Win Game When Leading by One Possession?",
       subtitle = "2001-2020, Final 2 Min; Sorted by Distance and Play Type (n = 1444)",
       caption = "Data from nflfastR",
       fill = "Play Type") +
  theme(plot.title = element_text(size = 10, hjust = 0.5),
        plot.subtitle = element_text(size = 8, hjust = 0.5))

WinRate_AllDowns_Dist_Last2Min_CIVersion <- pbp_Since2001_ProjectPlays_Last2Min %>%
  group_by(PlayType, RoughDist) %>%
  summarize(n = n(), WinRate = mean(posteam_win),
            Upper = upper_Bernoulli(posteam_win), Lower = lower_Bernoulli(posteam_win))

WinRate_AllDowns_Dist_Last2Min_CIVersion %>%
  ggplot(aes(x = RoughDist, y = WinRate, fill = PlayType)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(x = "Yards to Go", y = "Win Rate",
       title = "Does Offense Win Game When Leading by One Possession?",
       subtitle = "2001-2020, Final 2 Min; Sorted by Distance and Play Type (n = 1444)",
       caption = "Data from nflfastR",
       fill = "Play Type") +
  geom_errorbar(aes(ymin = Lower, ymax = Upper), position = "dodge") +
  theme(plot.title = element_text(size = 10, hjust = 0.5),
        plot.subtitle = element_text(size = 8, hjust = 0.5))

# Can use WPA approach for 3rd downs
WPA_3rdDown_Dist_Last2Min <- pbp_Since2001_ProjectPlays_Last2Min %>%
  filter(down == 3) %>% group_by(PlayType, RoughDist) %>%
  summarize(n = n(), MeanWPA = mean(wpa, na.rm = TRUE))
# View(arrange(WPA_3rdDown_Dist_Last2Min, RoughDist))
# sum(WPA_3rdDown_Dist_Last2Min$n); it's 978
# Keep eye on pretty small sample (16) for passes on 3rd and 1-2

WPA_3rdDown_Dist_Last2Min %>%
  ggplot(aes(x = RoughDist, y = MeanWPA, fill = PlayType)) +
  geom_bar(stat = "identity", position = "dodge") +
  geom_hline(yintercept = 0, alpha = 0.75,
             color = "black", linetype = "dashed") +
  labs(x = "Yards to Go", y = "Win Probability Added",
       title = "WPA on 3rd Downs in Final 2 Min, by Distance and Pass/Run",
       subtitle = "2001-2020; Offense Leading by One Possession (n = 978)",
       caption = "Data from nflfastR",
       fill = "Play Type") +
  theme(plot.title = element_text(size = 10, hjust = 0.5),
        plot.subtitle = element_text(size = 8, hjust = 0.5))

WPA_3rdDown_Dist_Last2Min_CIVersion <- pbp_Since2001_ProjectPlays_Last2Min %>%
  filter(down == 3) %>% group_by(PlayType, RoughDist) %>%
  summarize(n = n(), MeanWPA = mean(wpa, na.rm = TRUE),
            Lower = lower_Continuous(wpa), Upper = upper_Continuous(wpa))

WPA_3rdDown_Dist_Last2Min_CIVersion %>%
  ggplot(aes(x = RoughDist, y = MeanWPA, fill = PlayType)) +
  geom_bar(stat = "identity", position = "dodge") +
  geom_hline(yintercept = 0, alpha = 0.75,
             color = "black", linetype = "dashed") +
  labs(x = "Yards to Go", y = "Win Probability Added",
       title = "WPA on 3rd Downs in Final 2 Min, by Distance and Pass/Run",
       subtitle = "2001-2020; Offense Leading by One Possession (n = 978)",
       caption = "Data from nflfastR",
       fill = "Play Type") +
  geom_errorbar(aes(ymin = Lower, ymax = Upper), position = "dodge") +
  theme(plot.title = element_text(size = 10, hjust = 0.5),
        plot.subtitle = element_text(size = 8, hjust = 0.5))

# Now, do the version that accounts for def timeouts
WPA_3rdDown_Dist_Last2Min_NoDefTimeouts_CIVersion <- pbp_Since2001_ProjectPlays_Last2Min %>%
  filter(down == 3, defteam_timeouts_remaining == 0) %>% group_by(PlayType, RoughDist) %>%
  summarize(n = n(), MeanWPA = mean(wpa, na.rm = TRUE),
            Lower = lower_Continuous(wpa), Upper = upper_Continuous(wpa))
# View(arrange(WPA_3rdDown_Dist_Last2Min_NoDefTimeouts_CIVersion, RoughDist))
# sum(WPA_3rdDown_Dist_Last2Min_NoDefTimeouts_CIVersion$n); it's 697

WPA_3rdDown_Dist_Last2Min_NoDefTimeouts_CIVersion %>%
  ggplot(aes(x = RoughDist, y = MeanWPA, fill = PlayType)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(x = "Yards to Go", y = "Win Probability Added",
       title = "WPA on 3rd Downs in Final 2 Min, by Distance and Pass/Run",
       subtitle = "2001-2020; Offense Up One Score & Def has 0 TOs (n = 697)",
       caption = "Data from nflfastR",
       fill = "Play Type") +
  geom_errorbar(aes(ymin = Lower, ymax = Upper), position = "dodge") +
  theme(plot.title = element_text(size = 10, hjust = 0.5),
        plot.subtitle = element_text(size = 8, hjust = 0.5))

WPA_3rdDown_Dist_Last2Min_DefHasTimeouts_CIVersion <- pbp_Since2001_ProjectPlays_Last2Min %>%
  filter(down == 3, defteam_timeouts_remaining > 0) %>% group_by(PlayType, RoughDist) %>%
  summarize(n = n(), MeanWPA = mean(wpa, na.rm = TRUE),
            Lower = lower_Continuous(wpa), Upper = upper_Continuous(wpa))
# View(arrange(WPA_3rdDown_Dist_Last2Min_DefHasTimeouts_CIVersion, RoughDist))
# sum(WPA_3rdDown_Dist_Last2Min_DefHasTimeouts_CIVersion$n)

WPA_3rdDown_Dist_Last2Min_DefHasTimeouts_CIVersion %>%
  ggplot(aes(x = RoughDist, y = MeanWPA, fill = PlayType)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(x = "Yards to Go", y = "Win Probability Added",
       title = "WPA on 3rd Downs in Final 2 Min, by Distance and Pass/Run",
       subtitle = "2001-2020; Offense Up One Score & Def has Timeout (n = 174)",
       caption = "Data from nflfastR",
       fill = "Play Type") +
  geom_errorbar(aes(ymin = Lower, ymax = Upper), position = "dodge") +
  theme(plot.title = element_text(size = 10, hjust = 0.5),
        plot.subtitle = element_text(size = 8, hjust = 0.5))

WPA_AllDowns_DownAndDist_Last2Min <- pbp_Since2001_ProjectPlays_Last2Min %>%
  group_by(PlayType, GRAPHDown, RoughDist) %>%
  summarize(n = n(), MeanWPA = mean(wpa, na.rm = TRUE))
# View(WPA_AllDowns_DownAndDist_Last2Min)
WPA_AllDowns_Dist_Last2Min <- pbp_Since2001_ProjectPlays_Last2Min %>%
  group_by(PlayType, RoughDist) %>%
  summarize(n = n(), MeanWPA = mean(wpa, na.rm = TRUE))
# View(WPA_AllDowns_Dist_Last2Min)
# sum(WPA_AllDowns_Dist_Last2Min$n); it's 1444

# WPA for all downs (with the facet) is just a mess visually, don't use
# If no facet-wrap for down: better visually, but unfair to avoid that variable

# Visual mess/smaller samples are why we don't use facet_wrap "every down" one
# But still will use 3rd down only one

# NEXT, get into the "scoring when trailing" data
pbp_Since2001_TRAILING_ProjectPlays <- pbp_Since2001 %>% filter(!is.na(down) & play == 1)
pbp_Since2001_TRAILING_ProjectPlays <- pbp_Since2001_TRAILING_ProjectPlays %>% 
  filter(play_type != "qb_kneel" & play_type != "qb_spike")
# No special teams plays, or kneels, or spikes, or 2-PT Conv here
pbp_Since2001_TRAILING_ProjectPlays <- pbp_Since2001_TRAILING_ProjectPlays %>% 
  filter(score_differential > (-9) & score_differential < 0)
# Now we make it only one-possession games
pbp_Since2001_TRAILING_ProjectPlays$play_id <- 1:nrow(pbp_Since2001_TRAILING_ProjectPlays)

pbp_Since2001_TRAILING_ProjectPlays <- pbp_Since2001_TRAILING_ProjectPlays %>% 
  filter(play_type_nfl != "PENALTY")

pbp_Since2001_TRAILING_ProjectPlays <- pbp_Since2001_TRAILING_ProjectPlays %>% group_by(game_id, NewDrive) %>% 
  mutate(FirstPlayOfDrive = as.numeric(play_id == min(play_id))) %>% 
  ungroup()

pbp_Since2001_TRAILING_ProjectPlays <- pbp_Since2001_TRAILING_ProjectPlays %>% group_by(game_id, NewDrive) %>% 
  mutate(LastPlayOfDrive = as.numeric(play_id == max(play_id))) %>% 
  ungroup()

pbp_Since2001_TRAILING_ProjectPlays <- pbp_Since2001_TRAILING_ProjectPlays %>% group_by(game_id, NewSeries) %>% 
  mutate(FirstPlayOfSeries = as.numeric(play_id == min(play_id))) %>% 
  ungroup()

pbp_Since2001_TRAILING_ProjectPlays <- pbp_Since2001_TRAILING_ProjectPlays %>% group_by(game_id, NewSeries) %>% 
  mutate(LastPlayOfSeries = as.numeric(play_id == max(play_id))) %>% 
  ungroup()

pbp_Since2001_TRAILING_ProjectPlays <- pbp_Since2001_TRAILING_ProjectPlays %>%
  mutate(NetPoints = (7 * OffensiveTD) - (7 * DefensiveTD) + (7 * OffPuntTD)
         - (7 * PuntReturnTD) - (7 * FGReturnTD) + (3 * MadeFG) - (2 * safety))

pbp_Since2001_TRAILING_ProjectPlays <- pbp_Since2001_TRAILING_ProjectPlays %>% 
  mutate(GRAPHTimeouts = case_when(posteam_timeouts_remaining == 0 ~ "Off Timeouts = 0",
                                   posteam_timeouts_remaining == 1 ~ "Off Timeouts = 1",
                                   posteam_timeouts_remaining == 2 ~ "Off Timeouts = 2",
                                   posteam_timeouts_remaining == 3 ~ "Off Timeouts = 3"))

pbp_Since2001_TRAILING_ProjectPlays_Last2Min <- pbp_Since2001_TRAILING_ProjectPlays %>% 
  filter(half_seconds_remaining <= 120, game_half == "Half2")

pbp_Since2001_TRAILING_ProjectPlays_Last2Min$half_seconds_remaining <- 
  ifelse((pbp_Since2001_TRAILING_ProjectPlays_Last2Min$half_seconds_remaining) > 0, 
         (pbp_Since2001_TRAILING_ProjectPlays_Last2Min$half_seconds_remaining), 1)

pbp_Since2001_TRAILING_ProjectPlays_Last2Min$quarter_seconds_remaining <- 
  ifelse((pbp_Since2001_TRAILING_ProjectPlays_Last2Min$quarter_seconds_remaining) > 0, 
         (pbp_Since2001_TRAILING_ProjectPlays_Last2Min$quarter_seconds_remaining), 1)

pbp_Since2001_TRAILING_ProjectPlays_Last2Min$game_seconds_remaining <- 
  ifelse((pbp_Since2001_TRAILING_ProjectPlays_Last2Min$game_seconds_remaining) > 0, 
         (pbp_Since2001_TRAILING_ProjectPlays_Last2Min$game_seconds_remaining), 1)

# In final version, make it clear this formula is based on estimation
# E.G. 0:08 with timeout and 0:15 with no timeout both might be approx. 2 plays
pbp_Since2001_TRAILING_ProjectPlays_Last2Min <-
  pbp_Since2001_TRAILING_ProjectPlays_Last2Min %>% mutate(
    ADJTimeLeft = (ifelse(game_seconds_remaining <= 5, game_seconds_remaining, 
                          ifelse(game_seconds_remaining %in% 6:15 & posteam_timeouts_remaining == 0, game_seconds_remaining, 
                                 ifelse(game_seconds_remaining %in% 6:15 & posteam_timeouts_remaining >= 1, 7 + game_seconds_remaining, 
                                        ifelse(game_seconds_remaining %in% 16:30 & posteam_timeouts_remaining >= 2, 16 + game_seconds_remaining,
                                               ifelse(game_seconds_remaining %in% 16:30 & posteam_timeouts_remaining == 1, 8 + game_seconds_remaining, 
                                                      ifelse(game_seconds_remaining %in% 16:30 & posteam_timeouts_remaining == 0, game_seconds_remaining,
                                                             ifelse(game_seconds_remaining %in% 31:60 & posteam_timeouts_remaining == 3, 27 + game_seconds_remaining,
                                                                    ifelse(game_seconds_remaining %in% 31:60 & posteam_timeouts_remaining == 2, 18 + game_seconds_remaining,
                                                                           ifelse(game_seconds_remaining %in% 31:60 & posteam_timeouts_remaining == 1, 9 + game_seconds_remaining, 
                                                                                  ifelse(game_seconds_remaining %in% 31:60 & posteam_timeouts_remaining == 0, game_seconds_remaining, 
                                                                                         ifelse(game_seconds_remaining %in% 61:119, game_seconds_remaining + (10 * posteam_timeouts_remaining), 
                                                                                                game_seconds_remaining + 10 + (10 * posteam_timeouts_remaining))))))))))))))

pbp_Since2001_TRAILING_ProjectPlays_Last2Min <- pbp_Since2001_TRAILING_ProjectPlays_Last2Min %>%
  mutate(REALTimeBin = ifelse(game_seconds_remaining <= 40, "0:01 to 0:40", 
                              ifelse(game_seconds_remaining %in% 41:80, "0:41 to 1:20", "1:21 to 2:00")))

pbp_Since2001_TRAILING_ProjectPlays_Last2Min <- pbp_Since2001_TRAILING_ProjectPlays_Last2Min %>%
  mutate(ADJTimeBin = ifelse(ADJTimeLeft <= 60, "0:01 to 1:00", 
                             ifelse(ADJTimeLeft %in% 61:120, "1:01 to 2:00", 
                                    ifelse(ADJTimeLeft %in% 121:180, "2:01 to 3:00","3:01 to 4:00"))))

pbp_Since2001_TRAILING_ProjectPlays_Last2Min <- pbp_Since2001_TRAILING_ProjectPlays_Last2Min %>%
  mutate(PositionBin = ifelse(yardline_100 >= 85, "85+", 
                              ifelse(yardline_100 %in% 71:84, "71-84", 
                                     ifelse(yardline_100 %in% 51:70, "51-70", "1-50"))))

TRAILING_PointsScoredOnDriveTable_Last2Min <- pbp_Since2001_TRAILING_ProjectPlays_Last2Min %>% 
  group_by(game_id, NewDrive) %>%
  summarize(NetPoints = sum(NetPoints),
            TimeAtStart = max(half_seconds_remaining),
            ADJTimeAtStart= max(ADJTimeLeft),
            TOAtStart = max(posteam_timeouts_remaining),
            TimeoutsUsed = ( max(posteam_timeouts_remaining) - min(posteam_timeouts_remaining) ),
            FirstPlayOfDrive = sum(FirstPlayOfDrive),
            FinalPlayOfHalf = sum(LastPlayOfHalf),
            Turnovers = sum(OffTurnover),
            Punts = sum(Punt),
            PassPlays = sum(pass),
            EPA = sum(epa, na.rm = TRUE), 
            WPA = sum(wpa, na.rm = TRUE),
            GRAPHTimeouts = case_when(max(posteam_timeouts_remaining) == 0 ~ "Timeouts = 0",
                                      max(posteam_timeouts_remaining) == 1 ~ "Timeouts = 1",
                                      max(posteam_timeouts_remaining) == 2 ~ "Timeouts = 2",
                                      max(posteam_timeouts_remaining) == 3 ~ "Timeouts = 3"))
TRAILING_PointsScoredOnDriveTable_Last2Min <- TRAILING_PointsScoredOnDriveTable_Last2Min %>% filter(FirstPlayOfDrive > 0)

TRAILING_StartOfDrive_Last2Min <- pbp_Since2001_TRAILING_ProjectPlays_Last2Min %>%
  group_by(game_id, NewDrive) %>%
  filter(play_id == min(play_id)) %>%
  ungroup() %>%
  select(game_id, NewDrive, FirstPlayID = play_id,
         InitialEP = ep, InitialWP = wp, FieldPos = yardline_100,
         StartDrivePosTeam = posteam, StartDrivePosHomeAway = posteam_type,
         StartDrivePosScoreDiff = score_differential)

TRAILING_PointsScoredOnDriveTable_Last2Min <- TRAILING_PointsScoredOnDriveTable_Last2Min %>%
  merge(TRAILING_StartOfDrive_Last2Min, by = c("game_id", "NewDrive"))

TRAILING_PointsScoredOnDriveTable_Last2Min <- TRAILING_PointsScoredOnDriveTable_Last2Min %>%
  mutate(IsScoringDrive = ifelse(NetPoints > 0, 1, 0))

TRAILING_PointsScoredOnDriveTable_Last2Min <- TRAILING_PointsScoredOnDriveTable_Last2Min %>%
  mutate(IsTouchdown = ifelse(NetPoints > 5, 1, 0))

TRAILING_PointsScoredOnDriveTable_Last2Min <- TRAILING_PointsScoredOnDriveTable_Last2Min %>%
  mutate(REALTimeBin = ifelse(TimeAtStart <= 30, "0:01 to 0:30", 
                              ifelse(TimeAtStart %in% 31:60, "0:31 to 1:00", 
                                     ifelse(TimeAtStart %in% 61:90, "1:01 to 1:30","1:31 to 2:00"))))

TRAILING_PointsScoredOnDriveTable_Last2Min <- TRAILING_PointsScoredOnDriveTable_Last2Min %>%
  mutate(ADJTimeBin = ifelse(ADJTimeAtStart <= 40, "0:01 to 0:40", 
                             ifelse(ADJTimeAtStart %in% 41:80, "0:41 to 1:20", 
                                    ifelse(ADJTimeAtStart %in% 81:120, "1:21 to 2:00", "Over 2:00"))))

TRAILING_PointsScoredOnDriveTable_Last2Min <- TRAILING_PointsScoredOnDriveTable_Last2Min %>%
  mutate(PositionBin = ifelse(FieldPos >= 85, "85+", 
                              ifelse(FieldPos %in% 71:84, "71-84", 
                                     ifelse(FieldPos %in% 51:70, "51-70", "1-50"))))
# View(TRAILING_PointsScoredOnDriveTable_Last2Min)

# FOR NOW, going with time on X-axis here, instead of field position
ggplot(data = TRAILING_PointsScoredOnDriveTable_Last2Min) +
  stat_smooth(mapping = aes(x = ADJTimeAtStart, y = NetPoints, color = PositionBin),
              method = "loess", se = F, span = 0.9) +
  geom_abline(intercept = 0, slope = 0) +
  labs(x = "Adj Time Left (accounts for timeouts)", y = "Net Points",
       title = "Net Points on Drive When Trailing by One Possession",
       subtitle = "Last 2 Min of Game, 2001-2020 (n = 1390)",
       caption = "Data from nflfastR",
       color = "Field Position") +
  theme(plot.title = element_text(size = 10, hjust = 0.5),
        plot.subtitle = element_text(size = 8, hjust = 0.5))
# Graph isn't great w/ real time AND facet-wraps b/c small sample sizes

table(TRAILING_PointsScoredOnDriveTable_Last2Min$PositionBin)
# This just lets us see the sample sizes we are working with
# 83 drives starting from 1-50, 368 from 51-70, 705 from 71-84, 234 from 85+
table(TRAILING_PointsScoredOnDriveTable_Last2Min$ADJTimeBin)
# 151 drives with over 2:00 of ADJTime, 350+ drives for other groups

# THIS IS WITH LIKELIHOOD OF SCORING DRIVE/LIKELIHOOD OF TD
# THIS IS BETTER B/C PICK-SIXES DON'T MATTER WHEN DOWN BY 7
ggplot(data = TRAILING_PointsScoredOnDriveTable_Last2Min) +
  stat_smooth(mapping = aes(x = ADJTimeAtStart, y = IsScoringDrive, color = PositionBin),
              method = "loess", se = F, span = 0.75) +
  geom_abline(intercept = 0, slope = 0) +
  labs(x = "Adj Time Left (accounts for timeouts)", y = "Scoring Drive Rate",
       title = "Rate of Scoring Drives When Trailing by One Possession",
       subtitle = "Last 2 Min of Game, 2001-2020 (n = 1390)",
       caption = "Data from nflfastR",
       color = "Field Position") +
  theme(plot.title = element_text(size = 10, hjust = 0.5),
        plot.subtitle = element_text(size = 8, hjust = 0.5))
# Graph isn't great w/ real time AND facet-wraps b/c small sample sizes

# Adding confidence intervals makes it look messy b/c they overlap
ggplot(data = TRAILING_PointsScoredOnDriveTable_Last2Min) +
  stat_smooth(mapping = aes(x = ADJTimeAtStart, y = IsScoringDrive, color = PositionBin),
              method = "loess", se = T, span = 0.75) +
  geom_abline(intercept = 0, slope = 0) +
  labs(x = "Adj Time Left (accounts for timeouts)", y = "Scoring Drive Rate",
       title = "Rate of Scoring Drives When Trailing by One Possession",
       subtitle = "Last 2 Min of Game, 2001-2020 (n = 1390)",
       caption = "Data from nflfastR",
       color = "Field Position") +
  theme(plot.title = element_text(size = 10, hjust = 0.5),
        plot.subtitle = element_text(size = 8, hjust = 0.5))

# Can try flipping the axes, but more important variable should be on X-axis
ggplot(data = TRAILING_PointsScoredOnDriveTable_Last2Min) +
  stat_smooth(mapping = aes(x = FieldPos, y = IsScoringDrive, color = ADJTimeBin),
              method = "loess", se = F, span = 0.9) +
  geom_abline(intercept = 0, slope = 0) +
  labs(x = "Field Position", y = "Scoring Drive Rate",
       title = "Rate of Scoring Drives When Trailing by One Possession",
       subtitle = "Last 2 Min of Game, 2001-2020 (n = 1390)",
       caption = "Data from nflfastR",
       color = "Adj Time Left") +
  theme(plot.title = element_text(size = 10, hjust = 0.5),
        plot.subtitle = element_text(size = 8, hjust = 0.5))

PASSES_ProjectPlays_Last2Min <- pbp_Since2001_ProjectPlays_Last2Min %>%
  filter(pass == 1)
RUNS_ProjectPlays_Last2Min <- pbp_Since2001_ProjectPlays_Last2Min %>%
  filter(pass == 0)

# Add linear models, both for scoring when trailing and for clock-killing
# Note: V4s are with ADJTimeLeft (worse LMs, but more graph-friendly)
Trailing_IsScoringDrive_Last2Min_LMV1 <- glm(IsScoringDrive ~ TimeAtStart + 
                                               + FieldPos + TOAtStart, family = binomial,
                                             TRAILING_PointsScoredOnDriveTable_Last2Min) 
summary(Trailing_IsScoringDrive_Last2Min_LMV1)$coefficients

Trailing_IsScoringDrive_Last2Min_V1Prediction <- predict(Trailing_IsScoringDrive_Last2Min_LMV1, 
                                                         newdata = TRAILING_PointsScoredOnDriveTable_Last2Min,
                                                         type = "response")

Trailing_IsScoringDrive_Last2Min_LMV4 <- glm(IsScoringDrive ~ ADJTimeAtStart + 
                                               + FieldPos, family = binomial,
                                             TRAILING_PointsScoredOnDriveTable_Last2Min) 
summary(Trailing_IsScoringDrive_Last2Min_LMV4)$coefficients

Trailing_IsScoringDrive_Last2Min_V4Prediction <- predict(Trailing_IsScoringDrive_Last2Min_LMV4, 
                                                         newdata = TRAILING_PointsScoredOnDriveTable_Last2Min,
                                                         type = "response")

# To figure out which of V1 and V4 is more accurate, use RMSE (code saved elsewhere)
# Turns out to essentially be a toss-up, we'll use V1 b/c less abstract variables

# Test out theoretical examples
Trailing_IsScoringDrive_Last2Min_V1SamplePrediction <- predict(Trailing_IsScoringDrive_Last2Min_LMV1, 
                                                               newdata = data.frame("TimeAtStart" = c(20, 35, 40, 40, 70, 30, 95, 55),
                                                                                    "FieldPos" = c(85, 60, 80, 80, 65, 65, 75, 75), 
                                                                                    "TOAtStart" = c(0, 1, 1, 2, 1, 1, 0, 0)),
                                                               type = "response")

Trailing_IsScoringDrive_Last2Min_V1SampleDF <- cbind(data.frame("TimeAtStart" = c(20, 35, 40, 40, 70, 30, 95, 55),
                                                                "FieldPos" = c(85, 60, 80, 80, 65, 65, 75, 75), 
                                                                "TOAtStart" = c(0, 1, 1, 2, 1, 1, 0, 0)),
                                                     "Predicted_Score_Prob" = Trailing_IsScoringDrive_Last2Min_V1SamplePrediction)
# View(Trailing_IsScoringDrive_Last2Min_V1SampleDF)

# Now we get into clock-killing LMs and graphs
WPA_PASSES_Last2Min_LMV1 <- lm(wpa ~ game_seconds_remaining + down + ydstogo 
                               + yardline_100 + defteam_timeouts_remaining, PASSES_ProjectPlays_Last2Min) 
summary(WPA_PASSES_Last2Min_LMV1)$coefficients

WPA_PASSES_Last2Min_LMV4 <- lm(wpa ~ ADJTimeLeft + down + ydstogo 
                               + yardline_100, PASSES_ProjectPlays_Last2Min) 
summary(WPA_PASSES_Last2Min_LMV4)$coefficients

WPA_RUNS_Last2Min_LMV1 <- lm(wpa ~ game_seconds_remaining + down + ydstogo 
                             + yardline_100 + defteam_timeouts_remaining, RUNS_ProjectPlays_Last2Min) 
summary(WPA_RUNS_Last2Min_LMV1)$coefficients

WPA_RUNS_Last2Min_LMV4 <- lm(wpa ~ ADJTimeLeft + down + ydstogo 
                             + yardline_100, RUNS_ProjectPlays_Last2Min) 
summary(WPA_RUNS_Last2Min_LMV4)$coefficients
# OBSERVATION: RUNS have far lower p-values than PASSES

WPA_PASSES_Last2Min_V1Prediction <- predict(WPA_PASSES_Last2Min_LMV1, 
                                            newdata = pbp_Since2001_ProjectPlays_Last2Min)

WPA_RUNS_Last2Min_V1Prediction <- predict(WPA_RUNS_Last2Min_LMV1, 
                                          newdata = pbp_Since2001_ProjectPlays_Last2Min)
# View(cbind(WPA_PASSES_Last2Min_V1Prediction, WPA_RUNS_Last2Min_V1Prediction))

WPA_PASSES_Last2Min_V4Prediction <- predict(WPA_PASSES_Last2Min_LMV4, 
                                            newdata = pbp_Since2001_ProjectPlays_Last2Min)

WPA_RUNS_Last2Min_V4Prediction <- predict(WPA_RUNS_Last2Min_LMV4, 
                                          newdata = pbp_Since2001_ProjectPlays_Last2Min)
# View(cbind(WPA_PASSES_Last2Min_V4Prediction, WPA_RUNS_Last2Min_V4Prediction))

# Repeat for posteam_win
posteam_win_PASSES_Last2Min_LMV1 <- glm(posteam_win ~ game_seconds_remaining + down + ydstogo 
                                        + yardline_100 + defteam_timeouts_remaining, family = binomial, PASSES_ProjectPlays_Last2Min) 
summary(posteam_win_PASSES_Last2Min_LMV1)$coefficients

posteam_win_PASSES_Last2Min_LMV4 <- glm(posteam_win ~ ADJTimeLeft + down + ydstogo 
                                        + yardline_100, family = binomial, PASSES_ProjectPlays_Last2Min) 
summary(posteam_win_PASSES_Last2Min_LMV4)$coefficients

posteam_win_RUNS_Last2Min_LMV1 <- glm(posteam_win ~ game_seconds_remaining + down + ydstogo 
                                      + yardline_100 + defteam_timeouts_remaining, family = binomial, RUNS_ProjectPlays_Last2Min) 
summary(posteam_win_RUNS_Last2Min_LMV1)$coefficients

posteam_win_RUNS_Last2Min_LMV4 <- glm(posteam_win ~ ADJTimeLeft + down + ydstogo 
                                      + yardline_100, family = binomial, RUNS_ProjectPlays_Last2Min) 
summary(posteam_win_RUNS_Last2Min_LMV4)$coefficients

posteam_win_PASSES_Last2Min_V1Prediction <- predict(posteam_win_PASSES_Last2Min_LMV1, 
                                                    newdata = pbp_Since2001_ProjectPlays_Last2Min,
                                                    type = "response")

posteam_win_RUNS_Last2Min_V1Prediction <- predict(posteam_win_RUNS_Last2Min_LMV1, 
                                                  newdata = pbp_Since2001_ProjectPlays_Last2Min,
                                                  type = "response")
# View(cbind(posteam_win_PASSES_Last2Min_V1Prediction, posteam_win_RUNS_Last2Min_V1Prediction))

posteam_win_PASSES_Last2Min_V4Prediction <- predict(posteam_win_PASSES_Last2Min_LMV4, 
                                                    newdata = pbp_Since2001_ProjectPlays_Last2Min,
                                                    type = "response")

posteam_win_RUNS_Last2Min_V4Prediction <- predict(posteam_win_RUNS_Last2Min_LMV4, 
                                                  newdata = pbp_Since2001_ProjectPlays_Last2Min,
                                                  type = "response")
# View(cbind(posteam_win_PASSES_Last2Min_V4Prediction, posteam_win_RUNS_Last2Min_V4Prediction))

pbp_Since2001_ProjectPlays_Last2Min <- pbp_Since2001_ProjectPlays_Last2Min %>%
  mutate(WPA_PassVsRun_PredictedGAP_V1 = (WPA_PASSES_Last2Min_V1Prediction - WPA_RUNS_Last2Min_V1Prediction))

pbp_Since2001_ProjectPlays_Last2Min <- pbp_Since2001_ProjectPlays_Last2Min %>%
  mutate(WPA_PassIsBetter_V1 = ifelse(WPA_PassVsRun_PredictedGAP_V1 > 0, TRUE, FALSE))

pbp_Since2001_ProjectPlays_Last2Min <- pbp_Since2001_ProjectPlays_Last2Min %>%
  mutate(WPA_PassVsRun_PredictedGAP_V4 = (WPA_PASSES_Last2Min_V4Prediction - WPA_RUNS_Last2Min_V4Prediction))

pbp_Since2001_ProjectPlays_Last2Min <- pbp_Since2001_ProjectPlays_Last2Min %>%
  mutate(WPA_PassIsBetter_V4 = ifelse(WPA_PassVsRun_PredictedGAP_V4 > 0, TRUE, FALSE))

pbp_Since2001_ProjectPlays_Last2Min <- pbp_Since2001_ProjectPlays_Last2Min %>%
  mutate(posteam_win_PassVsRun_PredictedGAP_V1 = (posteam_win_PASSES_Last2Min_V1Prediction - posteam_win_RUNS_Last2Min_V1Prediction))

pbp_Since2001_ProjectPlays_Last2Min <- pbp_Since2001_ProjectPlays_Last2Min %>%
  mutate(posteam_win_PassIsBetter_V1 = ifelse(posteam_win_PassVsRun_PredictedGAP_V1 > 0, TRUE, FALSE))

pbp_Since2001_ProjectPlays_Last2Min <- pbp_Since2001_ProjectPlays_Last2Min %>%
  mutate(posteam_win_PassVsRun_PredictedGAP_V4 = (posteam_win_PASSES_Last2Min_V4Prediction - posteam_win_RUNS_Last2Min_V4Prediction))

pbp_Since2001_ProjectPlays_Last2Min <- pbp_Since2001_ProjectPlays_Last2Min %>%
  mutate(posteam_win_PassIsBetter_V4 = ifelse(posteam_win_PassVsRun_PredictedGAP_V4 > 0, TRUE, FALSE))

# Broadly, posteam_win LMs are much better so far (b/c not reliant on sole play)
# PROB WILL END UP CUTTING THE WPA LMs FROM FINAL VERSION

# MAKE LMs FOR PREDICTED PASS RATE
ProjectPlays_Last2Min_PassRateBinonialLMV2 <- glm(pass ~ down + yardline_100 + defteam_timeouts_remaining + ydstogo +
                                                    + game_seconds_remaining - 1, family = binomial, pbp_Since2001_ProjectPlays_Last2Min) 
summary(ProjectPlays_Last2Min_PassRateBinonialLMV2)$coefficients

ProjectPlays_Last2Min_PassRateBinonialLMV4 <- glm(pass ~ down + ydstogo + ADJTimeLeft - 1,
                                                  family = binomial, pbp_Since2001_ProjectPlays_Last2Min) 
summary(ProjectPlays_Last2Min_PassRateBinonialLMV4)$coefficients
# NOTE that ydstogo is negative b/c of collinearity (e.g. 1st and 10 vs 3rd and 8)

ProjectPlays_Last2Min_1stAnd10 <- pbp_Since2001_ProjectPlays_Last2Min %>% filter(down == 1, ydstogo == 10)
table(ProjectPlays_Last2Min_1stAnd10$pass)
ProjectPlays_Last2Min_1stAnd10_Passes <- ProjectPlays_Last2Min_1stAnd10 %>%
  filter(pass == 1)
# This is why we'll cut 1st and 10 material

ProjectPlays_Last2Min_All3rdDowns <- pbp_Since2001_ProjectPlays_Last2Min %>% filter(down == 3)
# The reason we go no intercept for these LMs is b/c intercept is very big and negative
ProjectPlays_Last2Min_PassRate_All3rdDownsLMV3 <- glm(pass ~ ydstogo + defteam_timeouts_remaining
                                                      + game_seconds_remaining - 1, family = binomial, ProjectPlays_Last2Min_All3rdDowns) 
summary(ProjectPlays_Last2Min_PassRate_All3rdDownsLMV3)$coefficients

# VERY GOOD EXAMPLE OF PassRate LMs BEING HORRIBLE
# ydstogo has negative coefficient b/c it's straight linear (e.g. 3rd and 20 is prob run)

ProjectPlays_Last2Min_PassRate_All3rdDownsLMV4 <- glm(pass ~ ydstogo + ADJTimeLeft
                                                      - 1, family = binomial, ProjectPlays_Last2Min_All3rdDowns) 
summary(ProjectPlays_Last2Min_PassRate_All3rdDownsLMV4)$coefficients

ProjectPlays_Last2Min_PassRate_All3rdDownsLMV5 <- glm(pass ~ ydstogo + DefHasTimeout
                                                      + game_seconds_remaining - 1, family = binomial, ProjectPlays_Last2Min_All3rdDowns) 
summary(ProjectPlays_Last2Min_PassRate_All3rdDownsLMV5)$coefficients

Last2Min_PassRate_All3rdDowns_FullTestPrediction_V3 <- predict(ProjectPlays_Last2Min_PassRate_All3rdDownsLMV3, 
                                                               newdata = data.frame("game_seconds_remaining" = rep(rep(1:120, 20), 4),
                                                                                    "ydstogo" = rep(rep(1:20, each = 120), 4),
                                                                                    "defteam_timeouts_remaining" = rep(0:3, each = 2400)),
                                                               type = "response")

Last2Min_PassRate_All3rdDowns_FullTestDF_V3 <- cbind(data.frame("game_seconds_remaining" = rep(rep(1:120, 20), 4),
                                                                "ydstogo" = rep(rep(1:20, each = 120), 4),
                                                                "defteam_timeouts_remaining" = rep(0:3, each = 2400)),
                                                     "PredictedPassRate" = Last2Min_PassRate_All3rdDowns_FullTestPrediction_V3)
# View(Last2Min_PassRate_All3rdDowns_FullTestDF_V3)

Last2Min_PassRate_All3rdDowns_FullTestPrediction_V4 <- predict(ProjectPlays_Last2Min_PassRate_All3rdDownsLMV4, 
                                                               newdata = data.frame("ADJTimeLeft" = rep(1:240, 20),
                                                                                    "ydstogo" = rep(1:20, each = 240)),
                                                               type = "response")

Last2Min_PassRate_All3rdDowns_FullTestDF_V4 <- cbind(data.frame("ADJTimeLeft" = rep(1:240, 20),
                                                                "ydstogo" = rep(1:20, each = 240)),
                                                     "PredictedPassRate" = Last2Min_PassRate_All3rdDowns_FullTestPrediction_V4)
# View(Last2Min_PassRate_All3rdDowns_FullTestDF_V4)

# Now, LMs for WPA and posteam_win
# KEEP IN MIND WPA LMs MAY BE CUT
# (at minimum, prob will cut the LMV1s for WPA)
ProjectPlays_Last2Min_WPA_All3rdDownsLMV1 <- lm(wpa ~ pass + ydstogo + defteam_timeouts_remaining +
                                                  game_seconds_remaining, ProjectPlays_Last2Min_All3rdDowns) 
summary(ProjectPlays_Last2Min_WPA_All3rdDownsLMV1)$coefficients

ProjectPlays_Last2Min_WPA_All3rdDownsLMV4 <- lm(wpa ~ pass + ydstogo + ADJTimeLeft,
                                                ProjectPlays_Last2Min_All3rdDowns) 
summary(ProjectPlays_Last2Min_WPA_All3rdDownsLMV4)$coefficients

ProjectPlays_Last2Min_All3rdDowns_Passes <- ProjectPlays_Last2Min_All3rdDowns %>%
  filter(pass == 1)
ProjectPlays_Last2Min_WPA_All3rdDowns_PassesLMV1 <- lm(wpa ~ ydstogo + defteam_timeouts_remaining +
                                                         game_seconds_remaining, ProjectPlays_Last2Min_All3rdDowns_Passes) 
summary(ProjectPlays_Last2Min_WPA_All3rdDowns_PassesLMV1)$coefficients

ProjectPlays_Last2Min_WPA_All3rdDowns_PassesLMV4 <- lm(wpa ~ ydstogo + ADJTimeLeft,
                                                       ProjectPlays_Last2Min_All3rdDowns_Passes) 
summary(ProjectPlays_Last2Min_WPA_All3rdDowns_PassesLMV4)$coefficients

ProjectPlays_Last2Min_All3rdDowns_Runs <- ProjectPlays_Last2Min_All3rdDowns %>%
  filter(pass == 0)
ProjectPlays_Last2Min_WPA_All3rdDowns_RunsLMV1 <- lm(wpa ~ ydstogo + defteam_timeouts_remaining +
                                                       game_seconds_remaining, ProjectPlays_Last2Min_All3rdDowns_Runs) 
summary(ProjectPlays_Last2Min_WPA_All3rdDowns_RunsLMV1)$coefficients

ProjectPlays_Last2Min_WPA_All3rdDowns_RunsLMV4 <- lm(wpa ~ ydstogo + ADJTimeLeft,
                                                     ProjectPlays_Last2Min_All3rdDowns_Runs) 
summary(ProjectPlays_Last2Min_WPA_All3rdDowns_RunsLMV4)$coefficients

WPA_Last2Min_All3rdDowns_Passes_V1Prediction <- predict(ProjectPlays_Last2Min_WPA_All3rdDowns_PassesLMV1, 
                                                        newdata = ProjectPlays_Last2Min_All3rdDowns)
WPA_Last2Min_All3rdDowns_Runs_V1Prediction <- predict(ProjectPlays_Last2Min_WPA_All3rdDowns_RunsLMV1, 
                                                      newdata = ProjectPlays_Last2Min_All3rdDowns)

WPA_Last2Min_All3rdDowns_Passes_V4Prediction <- predict(ProjectPlays_Last2Min_WPA_All3rdDowns_PassesLMV4, 
                                                        newdata = ProjectPlays_Last2Min_All3rdDowns)
WPA_Last2Min_All3rdDowns_Runs_V4Prediction <- predict(ProjectPlays_Last2Min_WPA_All3rdDowns_RunsLMV4, 
                                                      newdata = ProjectPlays_Last2Min_All3rdDowns)

ProjectPlays_Last2Min_posteam_win_All3rdDownsLMV1 <- glm(posteam_win ~ pass + ydstogo + defteam_timeouts_remaining +
                                                           game_seconds_remaining, family = binomial, ProjectPlays_Last2Min_All3rdDowns) 
summary(ProjectPlays_Last2Min_posteam_win_All3rdDownsLMV1)$coefficients

ProjectPlays_Last2Min_posteam_win_All3rdDownsLMV4 <- glm(posteam_win ~ pass + ydstogo + ADJTimeLeft,
                                                         family = binomial, ProjectPlays_Last2Min_All3rdDowns) 
summary(ProjectPlays_Last2Min_posteam_win_All3rdDownsLMV4)$coefficients

ProjectPlays_Last2Min_posteam_win_All3rdDowns_PassesLMV1 <- glm(posteam_win ~ ydstogo + defteam_timeouts_remaining +
                                                                  game_seconds_remaining, family = binomial, ProjectPlays_Last2Min_All3rdDowns_Passes) 
summary(ProjectPlays_Last2Min_posteam_win_All3rdDowns_PassesLMV1)$coefficients

ProjectPlays_Last2Min_posteam_win_All3rdDowns_PassesLMV4 <- glm(posteam_win ~ ydstogo + ADJTimeLeft,
                                                                family = binomial, ProjectPlays_Last2Min_All3rdDowns_Passes) 
summary(ProjectPlays_Last2Min_posteam_win_All3rdDowns_PassesLMV4)$coefficients

ProjectPlays_Last2Min_posteam_win_All3rdDowns_PassesLMV5 <- glm(posteam_win ~ ydstogo + DefHasTimeout +
                                                                  game_seconds_remaining, family = binomial, ProjectPlays_Last2Min_All3rdDowns_Passes) 
summary(ProjectPlays_Last2Min_posteam_win_All3rdDowns_PassesLMV5)$coefficients

ProjectPlays_Last2Min_posteam_win_All3rdDowns_RunsLMV1 <- glm(posteam_win ~ ydstogo + defteam_timeouts_remaining +
                                                                game_seconds_remaining, family = binomial, ProjectPlays_Last2Min_All3rdDowns_Runs) 
summary(ProjectPlays_Last2Min_posteam_win_All3rdDowns_RunsLMV1)$coefficients

ProjectPlays_Last2Min_posteam_win_All3rdDowns_RunsLMV4 <- glm(posteam_win ~ ydstogo + ADJTimeLeft,
                                                              family = binomial, ProjectPlays_Last2Min_All3rdDowns_Runs) 
summary(ProjectPlays_Last2Min_posteam_win_All3rdDowns_RunsLMV4)$coefficients

ProjectPlays_Last2Min_posteam_win_All3rdDowns_RunsLMV5 <- glm(posteam_win ~ ydstogo + DefHasTimeout +
                                                                  game_seconds_remaining, family = binomial, ProjectPlays_Last2Min_All3rdDowns_Runs) 
summary(ProjectPlays_Last2Min_posteam_win_All3rdDowns_RunsLMV5)$coefficients

posteam_win_Last2Min_All3rdDowns_Passes_V1Prediction <- predict(ProjectPlays_Last2Min_posteam_win_All3rdDowns_PassesLMV1, 
                                                                newdata = ProjectPlays_Last2Min_All3rdDowns,
                                                                type = "response")
posteam_win_Last2Min_All3rdDowns_Runs_V1Prediction <- predict(ProjectPlays_Last2Min_posteam_win_All3rdDowns_RunsLMV1, 
                                                              newdata = ProjectPlays_Last2Min_All3rdDowns,
                                                              type = "response")

posteam_win_Last2Min_All3rdDowns_Passes_V4Prediction <- predict(ProjectPlays_Last2Min_posteam_win_All3rdDowns_PassesLMV4, 
                                                                newdata = ProjectPlays_Last2Min_All3rdDowns,
                                                                type = "response")
posteam_win_Last2Min_All3rdDowns_Runs_V4Prediction <- predict(ProjectPlays_Last2Min_posteam_win_All3rdDowns_RunsLMV4, 
                                                              newdata = ProjectPlays_Last2Min_All3rdDowns,
                                                              type = "response")

posteam_win_Last2Min_All3rdDowns_Passes_V5Prediction <- predict(ProjectPlays_Last2Min_posteam_win_All3rdDowns_PassesLMV5, 
                                                                newdata = ProjectPlays_Last2Min_All3rdDowns,
                                                                type = "response")
posteam_win_Last2Min_All3rdDowns_Runs_V5Prediction <- predict(ProjectPlays_Last2Min_posteam_win_All3rdDowns_RunsLMV5, 
                                                              newdata = ProjectPlays_Last2Min_All3rdDowns,
                                                              type = "response")

WPA_Last2Min_All3rdDowns_Passes_FullTestPrediction <- predict(ProjectPlays_Last2Min_WPA_All3rdDowns_PassesLMV1, 
                                                              newdata = data.frame("game_seconds_remaining" = rep(rep(1:120, 20), 4),
                                                                                   "ydstogo" = rep(rep(1:20, each = 120), 4),
                                                                                   "defteam_timeouts_remaining" = rep(0:3, each = 2400)))

WPA_Last2Min_All3rdDowns_Runs_FullTestPrediction <- predict(ProjectPlays_Last2Min_WPA_All3rdDowns_RunsLMV1, 
                                                            newdata = data.frame("game_seconds_remaining" = rep(rep(1:120, 20), 4),
                                                                                 "ydstogo" = rep(rep(1:20, each = 120), 4),
                                                                                 "defteam_timeouts_remaining" = rep(0:3, each = 2400)))

Last2Min_All3rdDowns_WPAPasses_FullTestDF_V3 <- cbind(data.frame("game_seconds_remaining" = rep(rep(1:120, 20), 4),
                                                                 "ydstogo" = rep(rep(1:20, each = 120), 4),
                                                                 "defteam_timeouts_remaining" = rep(0:3, each = 2400)),
                                                      "PredictedPassWPA" = WPA_Last2Min_All3rdDowns_Passes_FullTestPrediction)

Last2Min_All3rdDowns_WPARuns_FullTestDF_V3 <- cbind(data.frame("game_seconds_remaining" = rep(rep(1:120, 20), 4),
                                                               "ydstogo" = rep(rep(1:20, each = 120), 4),
                                                               "defteam_timeouts_remaining" = rep(0:3, each = 2400)),
                                                    "PredictedRunWPA" = WPA_Last2Min_All3rdDowns_Runs_FullTestPrediction)

Last2Min_All3rdDowns_WPA_PassVsRun_FullTestDF_V3 <- cbind(Last2Min_PassRate_All3rdDowns_FullTestDF_V3,
                                                          Last2Min_All3rdDowns_WPAPasses_FullTestDF_V3$PredictedPassWPA,
                                                          Last2Min_All3rdDowns_WPARuns_FullTestDF_V3$PredictedRunWPA)

colnames(Last2Min_All3rdDowns_WPA_PassVsRun_FullTestDF_V3) <-
  c("game_seconds_remaining", "ydstogo", "defteam_timeouts_remaining",
    "PredictedPassRate", "PredictedPassWPA", "PredictedRunWPA")

Last2Min_All3rdDowns_WPA_PassVsRun_FullTestDF_V3 <- Last2Min_All3rdDowns_WPA_PassVsRun_FullTestDF_V3 %>%
  mutate(PassIsBetter = ifelse(PredictedPassWPA > PredictedRunWPA, TRUE, FALSE))
# View(Last2Min_All3rdDowns_WPA_PassVsRun_FullTestDF_V3)

Last2Min_All3rdDowns_WPA_PassVsRun_FullTestDF_V3 <- Last2Min_All3rdDowns_WPA_PassVsRun_FullTestDF_V3 %>%
  mutate(DoCoachesPass = ifelse(PredictedPassRate >= 0.5, TRUE, FALSE))

Last2Min_All3rdDowns_WPA_PassVsRun_FullTestDF_V3 <- Last2Min_All3rdDowns_WPA_PassVsRun_FullTestDF_V3 %>%
  mutate(GRAPHTimeouts = case_when(defteam_timeouts_remaining == 0 ~ "Def Timeouts = 0",
                                   defteam_timeouts_remaining == 1 ~ "Def Timeouts = 1",
                                   defteam_timeouts_remaining == 2 ~ "Def Timeouts = 2",
                                   defteam_timeouts_remaining == 3 ~ "Def Timeouts = 3"))

WPA_Last2Min_All3rdDowns_Passes_FullTestPrediction_V4 <- predict(ProjectPlays_Last2Min_WPA_All3rdDowns_PassesLMV4, 
                                                                 newdata = data.frame("ADJTimeLeft" = rep(1:240, 20),
                                                                                      "ydstogo" = rep(1:20, each = 240)))

WPA_Last2Min_All3rdDowns_Runs_FullTestPrediction_V4 <- predict(ProjectPlays_Last2Min_WPA_All3rdDowns_RunsLMV4, 
                                                               newdata = data.frame("ADJTimeLeft" = rep(1:240, 20),
                                                                                    "ydstogo" = rep(1:20, each = 240)))

Last2Min_All3rdDowns_WPAPasses_FullTestDF_V4 <- cbind(data.frame("ADJTimeLeft" = rep(1:240, 20),
                                                                 "ydstogo" = rep(1:20, each = 240),
                                                                 "PredictedPassWPA" = WPA_Last2Min_All3rdDowns_Passes_FullTestPrediction_V4))

Last2Min_All3rdDowns_WPARuns_FullTestDF_V4 <- cbind(data.frame("ADJTimeLeft" = rep(1:240, 20),
                                                               "ydstogo" = rep(1:20, each = 240),
                                                               "PredictedRunWPA" = WPA_Last2Min_All3rdDowns_Runs_FullTestPrediction_V4))

Last2Min_All3rdDowns_WPA_PassVsRun_FullTestDF_V4 <- cbind(Last2Min_PassRate_All3rdDowns_FullTestDF_V4,
                                                          Last2Min_All3rdDowns_WPAPasses_FullTestDF_V4$PredictedPassWPA,
                                                          Last2Min_All3rdDowns_WPARuns_FullTestDF_V4$PredictedRunWPA)

colnames(Last2Min_All3rdDowns_WPA_PassVsRun_FullTestDF_V4) <-
  c("ADJTimeLeft", "ydstogo",
    "PredictedPassRate", "PredictedPassWPA", "PredictedRunWPA")

Last2Min_All3rdDowns_WPA_PassVsRun_FullTestDF_V4 <- Last2Min_All3rdDowns_WPA_PassVsRun_FullTestDF_V4 %>%
  mutate(PassIsBetter = ifelse(PredictedPassWPA > PredictedRunWPA, TRUE, FALSE))
# View(Last2Min_All3rdDowns_WPA_PassVsRun_FullTestDF_V4)

Last2Min_All3rdDowns_WPA_PassVsRun_FullTestDF_V4 <- Last2Min_All3rdDowns_WPA_PassVsRun_FullTestDF_V4 %>%
  mutate(DoCoachesPass = ifelse(PredictedPassRate >= 0.5, TRUE, FALSE))

posteam_win_Last2Min_All3rdDowns_Passes_FullTestPrediction <- predict(ProjectPlays_Last2Min_posteam_win_All3rdDowns_PassesLMV1, 
                                                                      newdata = data.frame("game_seconds_remaining" = rep(rep(1:120, 20), 4),
                                                                                           "ydstogo" = rep(rep(1:20, each = 120), 4),
                                                                                           "defteam_timeouts_remaining" = rep(0:3, each = 2400)),
                                                                      type = "response")

posteam_win_Last2Min_All3rdDowns_Runs_FullTestPrediction <- predict(ProjectPlays_Last2Min_posteam_win_All3rdDowns_RunsLMV1, 
                                                                    newdata = data.frame("game_seconds_remaining" = rep(rep(1:120, 20), 4),
                                                                                         "ydstogo" = rep(rep(1:20, each = 120), 4),
                                                                                         "defteam_timeouts_remaining" = rep(0:3, each = 2400)),
                                                                    type = "response")

Last2Min_All3rdDowns_posteam_winPasses_FullTestDF_V3 <- cbind(data.frame("game_seconds_remaining" = rep(rep(1:120, 20), 4),
                                                                         "ydstogo" = rep(rep(1:20, each = 120), 4),
                                                                         "defteam_timeouts_remaining" = rep(0:3, each = 2400)),
                                                              "PredictedPassPossWin" = posteam_win_Last2Min_All3rdDowns_Passes_FullTestPrediction)

Last2Min_All3rdDowns_posteam_winRuns_FullTestDF_V3 <- cbind(data.frame("game_seconds_remaining" = rep(rep(1:120, 20), 4),
                                                                       "ydstogo" = rep(rep(1:20, each = 120), 4),
                                                                       "defteam_timeouts_remaining" = rep(0:3, each = 2400)),
                                                            "PredictedRunPossWin" = posteam_win_Last2Min_All3rdDowns_Runs_FullTestPrediction)

Last2Min_All3rdDowns_posteam_win_PassVsRun_FullTestDF_V3 <- cbind(Last2Min_PassRate_All3rdDowns_FullTestDF_V3,
                                                                  Last2Min_All3rdDowns_posteam_winPasses_FullTestDF_V3$PredictedPassPossWin,
                                                                  Last2Min_All3rdDowns_posteam_winRuns_FullTestDF_V3$PredictedRunPossWin)

colnames(Last2Min_All3rdDowns_posteam_win_PassVsRun_FullTestDF_V3) <-
  c("game_seconds_remaining", "ydstogo", "defteam_timeouts_remaining",
    "PredictedPassRate", "PredictedPassPossWin", "PredictedRunPossWin")

Last2Min_All3rdDowns_posteam_win_PassVsRun_FullTestDF_V3 <- Last2Min_All3rdDowns_posteam_win_PassVsRun_FullTestDF_V3 %>%
  mutate(PassIsBetter = ifelse(PredictedPassPossWin > PredictedRunPossWin, TRUE, FALSE))
# View(Last2Min_All3rdDowns_posteam_win_PassVsRun_FullTestDF_V3)

Last2Min_All3rdDowns_posteam_win_PassVsRun_FullTestDF_V3 <- Last2Min_All3rdDowns_posteam_win_PassVsRun_FullTestDF_V3 %>%
  mutate(DoCoachesPass = ifelse(PredictedPassRate >= 0.5, TRUE, FALSE))

Last2Min_All3rdDowns_posteam_win_PassVsRun_FullTestDF_V3 <- Last2Min_All3rdDowns_posteam_win_PassVsRun_FullTestDF_V3 %>%
  mutate(GRAPHTimeouts = case_when(defteam_timeouts_remaining == 0 ~ "Def Timeouts = 0",
                                   defteam_timeouts_remaining == 1 ~ "Def Timeouts = 1",
                                   defteam_timeouts_remaining == 2 ~ "Def Timeouts = 2",
                                   defteam_timeouts_remaining == 3 ~ "Def Timeouts = 3"))

posteam_win_Last2Min_All3rdDowns_Passes_FullTestPrediction_V4 <- predict(ProjectPlays_Last2Min_posteam_win_All3rdDowns_PassesLMV4, 
                                                                         newdata = data.frame("ADJTimeLeft" = rep(1:240, 20),
                                                                                              "ydstogo" = rep(1:20, each = 240)),
                                                                         type = "response")

posteam_win_Last2Min_All3rdDowns_Runs_FullTestPrediction_V4 <- predict(ProjectPlays_Last2Min_posteam_win_All3rdDowns_RunsLMV4, 
                                                                       newdata = data.frame("ADJTimeLeft" = rep(1:240, 20),
                                                                                            "ydstogo" = rep(1:20, each = 240)),
                                                                       type = "response")

Last2Min_All3rdDowns_posteam_winPasses_FullTestDF_V4 <- cbind(data.frame("ADJTimeLeft" = rep(1:240, 20),
                                                                         "ydstogo" = rep(1:20, each = 240),
                                                                         "PredictedPassPossWin" = posteam_win_Last2Min_All3rdDowns_Passes_FullTestPrediction_V4))

Last2Min_All3rdDowns_posteam_winRuns_FullTestDF_V4 <- cbind(data.frame("ADJTimeLeft" = rep(1:240, 20),
                                                                       "ydstogo" = rep(1:20, each = 240),
                                                                       "PredictedRunPossWin" = posteam_win_Last2Min_All3rdDowns_Runs_FullTestPrediction_V4))

Last2Min_All3rdDowns_posteam_win_PassVsRun_FullTestDF_V4 <- cbind(Last2Min_PassRate_All3rdDowns_FullTestDF_V4,
                                                                  Last2Min_All3rdDowns_posteam_winPasses_FullTestDF_V4$PredictedPassPossWin,
                                                                  Last2Min_All3rdDowns_posteam_winRuns_FullTestDF_V4$PredictedRunPossWin)

colnames(Last2Min_All3rdDowns_posteam_win_PassVsRun_FullTestDF_V4) <-
  c("ADJTimeLeft", "ydstogo",
    "PredictedPassRate", "PredictedPassPossWin", "PredictedRunPossWin")

Last2Min_All3rdDowns_posteam_win_PassVsRun_FullTestDF_V4 <- Last2Min_All3rdDowns_posteam_win_PassVsRun_FullTestDF_V4 %>%
  mutate(PassIsBetter = ifelse(PredictedPassPossWin > PredictedRunPossWin, TRUE, FALSE))
# View(Last2Min_All3rdDowns_posteam_win_PassVsRun_FullTestDF_V4)

Last2Min_All3rdDowns_posteam_win_PassVsRun_FullTestDF_V4 <- Last2Min_All3rdDowns_posteam_win_PassVsRun_FullTestDF_V4 %>%
  mutate(DoCoachesPass = ifelse(PredictedPassRate >= 0.5, TRUE, FALSE))

Last2Min_PassRate_All3rdDowns_FullTestPrediction_V5 <- predict(ProjectPlays_Last2Min_PassRate_All3rdDownsLMV5, 
                                                               newdata = data.frame("game_seconds_remaining" = rep(rep(1:120, 20), 2),
                                                                                    "ydstogo" = rep(rep(1:20, each = 120), 2),
                                                                                    "DefHasTimeout" = rep(0:1, each = 2400)),
                                                               type = "response")

Last2Min_PassRate_All3rdDowns_FullTestDF_V5 <- cbind(data.frame("game_seconds_remaining" = rep(rep(1:120, 20), 2),
                                                                "ydstogo" = rep(rep(1:20, each = 120), 2),
                                                                "DefHasTimeout" = rep(0:1, each = 2400)),
                                                     "PredictedPassRate" = Last2Min_PassRate_All3rdDowns_FullTestPrediction_V5)
# View(Last2Min_PassRate_All3rdDowns_FullTestDF_V5)

posteam_win_Last2Min_All3rdDowns_Passes_FullTestPrediction_V5 <- predict(ProjectPlays_Last2Min_posteam_win_All3rdDowns_PassesLMV5, 
                                                                      newdata = data.frame("game_seconds_remaining" = rep(rep(1:120, 20), 2),
                                                                                           "ydstogo" = rep(rep(1:20, each = 120), 2),
                                                                                           "DefHasTimeout" = rep(0:1, each = 2400)),
                                                                      type = "response")

posteam_win_Last2Min_All3rdDowns_Runs_FullTestPrediction_V5 <- predict(ProjectPlays_Last2Min_posteam_win_All3rdDowns_RunsLMV5, 
                                                                    newdata = data.frame("game_seconds_remaining" = rep(rep(1:120, 20), 2),
                                                                                         "ydstogo" = rep(rep(1:20, each = 120), 2),
                                                                                         "DefHasTimeout" = rep(0:1, each = 2400)),
                                                                    type = "response")

Last2Min_All3rdDowns_posteam_winPasses_FullTestDF_V5 <- cbind(data.frame("game_seconds_remaining" = rep(rep(1:120, 20), 2),
                                                                         "ydstogo" = rep(rep(1:20, each = 120), 2),
                                                                         "DefHasTimeout" = rep(0:1, each = 2400)),
                                                              "PredictedPassPossWin" = posteam_win_Last2Min_All3rdDowns_Passes_FullTestPrediction_V5)

Last2Min_All3rdDowns_posteam_winRuns_FullTestDF_V5 <- cbind(data.frame("game_seconds_remaining" = rep(rep(1:120, 20), 2),
                                                                       "ydstogo" = rep(rep(1:20, each = 120), 2),
                                                                       "DefHasTimeout" = rep(0:1, each = 2400)),
                                                            "PredictedRunPossWin" = posteam_win_Last2Min_All3rdDowns_Runs_FullTestPrediction_V5)

Last2Min_All3rdDowns_posteam_win_PassVsRun_FullTestDF_V5 <- cbind(Last2Min_PassRate_All3rdDowns_FullTestDF_V5,
                                                                  Last2Min_All3rdDowns_posteam_winPasses_FullTestDF_V5$PredictedPassPossWin,
                                                                  Last2Min_All3rdDowns_posteam_winRuns_FullTestDF_V5$PredictedRunPossWin)

colnames(Last2Min_All3rdDowns_posteam_win_PassVsRun_FullTestDF_V5) <-
  c("game_seconds_remaining", "ydstogo", "DefHasTimeout",
    "PredictedPassRate", "PredictedPassPossWin", "PredictedRunPossWin")

Last2Min_All3rdDowns_posteam_win_PassVsRun_FullTestDF_V5 <- Last2Min_All3rdDowns_posteam_win_PassVsRun_FullTestDF_V5 %>%
  mutate(PassIsBetter = ifelse(PredictedPassPossWin > PredictedRunPossWin, TRUE, FALSE))
# View(Last2Min_All3rdDowns_posteam_win_PassVsRun_FullTestDF_V5)

Last2Min_All3rdDowns_posteam_win_PassVsRun_FullTestDF_V5 <- Last2Min_All3rdDowns_posteam_win_PassVsRun_FullTestDF_V5 %>%
  mutate(DoCoachesPass = ifelse(PredictedPassRate >= 0.5, TRUE, FALSE))

Last2Min_All3rdDowns_posteam_win_PassVsRun_FullTestDF_V5 <- Last2Min_All3rdDowns_posteam_win_PassVsRun_FullTestDF_V5 %>%
  mutate(GRAPHTimeouts = case_when(DefHasTimeout == 0 ~ "Def Has 0 Timeouts",
                                  DefHasTimeout >= 1 ~ "Def Has 1+ Timeout"))
# KEEP IN MIND THAT PassRate LMs ARE HORRIBLE (may not use any)

# Also prob good to make GLMs for conversion rates (on 3rd downs, etc.)
# CONCEPTUALLY SIMILAR TO View(arrange(FirstDownOnPlay_Dist_Last2Min, RoughDist)), PICK ONE TO USE
ProjectPlays_Last2Min_FirstDownOnPlay_LMV1 <- glm(first_down ~ pass + yardline_100 + down
                                                  + ydstogo, family = binomial,
                                                  pbp_Since2001_ProjectPlays_Last2Min) 
summary(ProjectPlays_Last2Min_FirstDownOnPlay_LMV1)$coefficients

# USE THIS TO NOTE THAT EARLY DOWN PASSES ARE EFFECTIVE (prob in early section):
ProjectPlays_Last2Min_EarlyDownPasses <- PASSES_ProjectPlays_Last2Min %>% filter(down < 3)
sum(ProjectPlays_Last2Min_EarlyDownPasses$first_down)
sum(ProjectPlays_Last2Min_EarlyDownPasses$yards_gained)
# Add 27 - 10 + 41 + 16 to this b/c DPI, so real total is 532 + 74 = 606 ... 606 / 78 = 7.77
mean(ProjectPlays_Last2Min_EarlyDownPasses$ydstogo)

ProjectPlays_Last2Min_Passes_FirstDownOnPlay_LMV1 <- glm(first_down ~ yardline_100 + down
                                                         + ydstogo, family = binomial,
                                                         PASSES_ProjectPlays_Last2Min) 
summary(ProjectPlays_Last2Min_Passes_FirstDownOnPlay_LMV1)$coefficients

ProjectPlays_Last2Min_Runs_FirstDownOnPlay_LMV1 <- glm(first_down ~ yardline_100 + down
                                                       + ydstogo, family = binomial,
                                                       RUNS_ProjectPlays_Last2Min) 
summary(ProjectPlays_Last2Min_Runs_FirstDownOnPlay_LMV1)$coefficients

ProjectPlays_Last2Min_Passes_FirstDownOnPlay_V1SamplePrediction <- predict(ProjectPlays_Last2Min_Passes_FirstDownOnPlay_LMV1, 
                                                                       newdata = data.frame("pass" = c(1, 1, 1, 1),
                                                                                            "down" = c(1, 2, 3, 3),
                                                                                            "ydstogo" = c(10, 9, 7, 2), 
                                                                                            "yardline_100" = c(60, 75, 65, 55)),
                                                                       type = "response")

ProjectPlays_Last2Min_Passes_FirstDownOnPlay_V1SampleDF <- cbind(data.frame("pass" = c(1, 1, 1, 1),
                                                                        "down" = c(1, 2, 3, 3),
                                                                        "ydstogo" = c(10, 9, 7, 2), 
                                                                        "yardline_100" = c(60, 75, 65, 55)),
                                                             "Predicted_FirstDownRate" = ProjectPlays_Last2Min_Passes_FirstDownOnPlay_V1SamplePrediction)

ProjectPlays_Last2Min_Runs_FirstDownOnPlay_V1SamplePrediction <- predict(ProjectPlays_Last2Min_Runs_FirstDownOnPlay_LMV1, 
                                                                     newdata = data.frame("pass" = c(0, 0, 0, 0),
                                                                                          "down" = c(1, 2, 3, 3),
                                                                                          "ydstogo" = c(10, 9, 7, 2), 
                                                                                          "yardline_100" = c(60, 75, 65, 55)),
                                                                     type = "response")

ProjectPlays_Last2Min_Runs_FirstDownOnPlay_V1SampleDF <- cbind(data.frame("pass" = c(0, 0, 0, 0),
                                                                      "down" = c(1, 2, 3, 3),
                                                                      "ydstogo" = c(10, 9, 7, 2), 
                                                                      "yardline_100" = c(60, 75, 65, 55)),
                                                           "Predicted_FirstDownRate" = ProjectPlays_Last2Min_Runs_FirstDownOnPlay_V1SamplePrediction)
# View(rbind(ProjectPlays_Last2Min_Passes_FirstDownOnPlay_V1SampleDF, ProjectPlays_Last2Min_Runs_FirstDownOnPlay_V1SampleDF) %>% arrange(down, ydstogo))

ProjectPlays_Last2Min_All3rdDowns_FirstDownOnPlay_LMV1 <- glm(first_down ~ pass + yardline_100
                                                              + ydstogo, family = binomial,
                                                              ProjectPlays_Last2Min_All3rdDowns) 
summary(ProjectPlays_Last2Min_All3rdDowns_FirstDownOnPlay_LMV1)$coefficients

ProjectPlays_Last2Min_All3rdDowns_Passes_FirstDownOnPlay_LMV1 <- glm(first_down ~ yardline_100
                                                                     + ydstogo, family = binomial,
                                                                     ProjectPlays_Last2Min_All3rdDowns_Passes) 
summary(ProjectPlays_Last2Min_All3rdDowns_Passes_FirstDownOnPlay_LMV1)$coefficients

ProjectPlays_Last2Min_All3rdDowns_Runs_FirstDownOnPlay_LMV1 <- glm(first_down ~ yardline_100
                                                                   + ydstogo, family = binomial,
                                                                   ProjectPlays_Last2Min_All3rdDowns_Runs) 
summary(ProjectPlays_Last2Min_All3rdDowns_Runs_FirstDownOnPlay_LMV1)$coefficients

ProjectPlays_Last2Min_All3rdDowns_Passes_FirstDownOnPlay_V1SamplePrediction <- predict(ProjectPlays_Last2Min_All3rdDowns_Passes_FirstDownOnPlay_LMV1, 
                                                                                   newdata = data.frame("pass" = c(1, 1, 1, 1),
                                                                                                        "ydstogo" = c(10, 8, 5, 2), 
                                                                                                        "yardline_100" = c(60, 75, 65, 55)),
                                                                                   type = "response")

ProjectPlays_Last2Min_All3rdDowns_Passes_FirstDownOnPlay_V1SampleDF <- cbind(data.frame("pass" = c(1, 1, 1, 1),
                                                                                    "ydstogo" = c(10, 8, 5, 2), 
                                                                                    "yardline_100" = c(60, 75, 65, 55)),
                                                                         "Predicted_FirstDownRate" = ProjectPlays_Last2Min_All3rdDowns_Passes_FirstDownOnPlay_V1SamplePrediction)

ProjectPlays_Last2Min_All3rdDowns_Runs_FirstDownOnPlay_V1SamplePrediction <- predict(ProjectPlays_Last2Min_All3rdDowns_Runs_FirstDownOnPlay_LMV1, 
                                                                                 newdata = data.frame("pass" = c(0, 0, 0, 0),
                                                                                                      "ydstogo" = c(10, 8, 5, 2), 
                                                                                                      "yardline_100" = c(60, 75, 65, 55)),
                                                                                 type = "response")

ProjectPlays_Last2Min_All3rdDowns_Runs_FirstDownOnPlay_V1SampleDF <- cbind(data.frame("pass" = c(0, 0, 0, 0),
                                                                                  "ydstogo" = c(10, 8, 5, 2), 
                                                                                  "yardline_100" = c(60, 75, 65, 55)),
                                                                       "Predicted_FirstDownRate" = ProjectPlays_Last2Min_All3rdDowns_Runs_FirstDownOnPlay_V1SamplePrediction)
# View(rbind(ProjectPlays_Last2Min_All3rdDowns_Passes_FirstDownOnPlay_V1SampleDF, ProjectPlays_Last2Min_All3rdDowns_Runs_FirstDownOnPlay_V1SampleDF) %>% arrange(ydstogo))

# Use all of these LMs/GLMs to make graphs about run/pass frequencies
# DO NOT USE ANY PLOTS INVOLVING PassRate LMs (use the "actual play" ones)
# FOR ANY OF THESE, we can combine facet plot and non-facet plot into one snip

ggplot(Last2Min_All3rdDowns_WPA_PassVsRun_FullTestDF_V3) + 
  geom_point(mapping = aes(x = ydstogo, y = game_seconds_remaining, col = PassIsBetter)) +
  facet_wrap(~GRAPHTimeouts) +
  labs(x = "Yards to Go", y = "Time Left",
       title = "Should Offense Pass when Up by One Score in Final 2 Min?",
       subtitle = "3rd Down Plays; Based on WPA, from 2001-2020",
       caption = "Data from nflfastR",
       color = "Should Offense Pass?") +
  theme(plot.title = element_text(size = 10, hjust = 0.4),
        plot.subtitle = element_text(size = 8, hjust = 0.4))

ggplot(Last2Min_All3rdDowns_WPA_PassVsRun_FullTestDF_V4) + 
  geom_point(mapping = aes(x = ydstogo, y = ADJTimeLeft, col = PassIsBetter)) +
  labs(x = "Yards to Go", y = "Adj Time Left (def T.O. = +40 sec)",
       title = "Should Offense Pass when Up by One Score in Final 2 Min?",
       subtitle = "3rd Down Plays; Based on WPA, from 2001-2020",
       caption = "Data from nflfastR",
       color = "Should Offense Pass?") +
  theme(plot.title = element_text(size = 10, hjust = 0.4),
        plot.subtitle = element_text(size = 8, hjust = 0.4))

ggplot(Last2Min_All3rdDowns_posteam_win_PassVsRun_FullTestDF_V3) + 
  geom_point(mapping = aes(x = ydstogo, y = game_seconds_remaining, col = PassIsBetter)) +
  facet_wrap(~GRAPHTimeouts) +
  labs(x = "Yards to Go", y = "Time Left",
       title = "Is Passing Better When Up by One Score in Final 2 Min?",
       subtitle = "3rd Down Plays; Based on Eventual Win Rate, from 2001-2020",
       caption = "Data from nflfastR",
       color = "Should Offense Pass?") +
  theme(plot.title = element_text(size = 10, hjust = 0.4),
        plot.subtitle = element_text(size = 8, hjust = 0.4))

ggplot(Last2Min_All3rdDowns_posteam_win_PassVsRun_FullTestDF_V5) + 
  geom_point(mapping = aes(x = ydstogo, y = game_seconds_remaining, col = PassIsBetter)) +
  facet_wrap(~GRAPHTimeouts) +
  labs(x = "Yards to Go", y = "Time Left",
       title = "Is Passing Better When Up by One Score in Final 2 Min?",
       subtitle = "3rd Down Plays; Based on Eventual Win Rate, from 2001-2020",
       caption = "Data from nflfastR",
       color = "Should Offense Pass?") +
  theme(plot.title = element_text(size = 10, hjust = 0.4),
        plot.subtitle = element_text(size = 8, hjust = 0.4))

ggplot(Last2Min_All3rdDowns_posteam_win_PassVsRun_FullTestDF_V4) + 
  geom_point(mapping = aes(x = ydstogo, y = ADJTimeLeft, col = PassIsBetter)) +
  labs(x = "Yards to Go", y = "ADJ Time Left (accounts for timeouts)",
       title = "Is Passing Better When Up by One Score in Final 2 Min?",
       subtitle = "3rd Down Plays; Based on Eventual Win Rate, from 2001-2020",
       caption = "Data from nflfastR",
       color = "Should Offense Pass?") +
  theme(plot.title = element_text(size = 10, hjust = 0.4),
        plot.subtitle = element_text(size = 8, hjust = 0.4))

ggplot(ProjectPlays_Last2Min_All3rdDowns) + 
  geom_point(mapping = aes(x = ydstogo, y = wpa, col = PlayType)) +
  labs(x = "Yards to Go", y = "Win Probability Added",
       title = "Is Passing Effective When Up By One Score in Final 2 Min?",
       subtitle = "3rd Down Plays; Based on WPA, from 2001-2020",
       caption = "Data from nflfastR",
       color = "Play Type") +
  theme(plot.title = element_text(size = 10, hjust = 0.4),
        plot.subtitle = element_text(size = 8, hjust = 0.4))

ggplot(ProjectPlays_Last2Min_All3rdDowns) + 
  geom_point(mapping = aes(x = ydstogo, y = factor(posteam_win), col = PlayType)) +
  facet_wrap(~GRAPHADJTimeBin) +
  labs(x = "Yards to Go", y = "Did Offense Win?",
       title = "Did Offense Win When Up By One Score in Final 2 Min?",
       subtitle = "3rd Down Plays; Based on Run/Pass, from 2001-2020 (n = 978)",
       caption = "Data from nflfastR",
       color = "Play Type") +
  theme(plot.title = element_text(size = 10, hjust = 0.4),
        plot.subtitle = element_text(size = 8, hjust = 0.4))

ggplot(ProjectPlays_Last2Min_All3rdDowns) + 
  geom_point(mapping = aes(x = ydstogo, y = PlayType, col = factor(posteam_win))) +
  facet_wrap(~GRAPHADJTimeBin) +
  labs(x = "Yards to Go", y = "Play Type",
       title = "Did Offense Win When Up By One Score in Final 2 Min?",
       subtitle = "3rd Down Plays; Based on Run/Pass, from 2001-2020 (n = 978)",
       caption = "Data from nflfastR",
       color = "Did Offense Win?") +
  theme(plot.title = element_text(size = 10, hjust = 0.4),
        plot.subtitle = element_text(size = 8, hjust = 0.4))

ggplot(ProjectPlays_Last2Min_All3rdDowns) + 
  geom_point(mapping = aes(x = ydstogo, y = game_seconds_remaining, col = PlayType)) +
  facet_wrap(~GRAPHTimeouts) +
  labs(x = "Yards to Go", y = "Time Left",
       title = "Have Offenses Passed When Up by One Score in Final 2 Min?",
       subtitle = "3rd Down Plays, from 2001-2020 (n = 978)",
       caption = "Data from nflfastR",
       color = "Play Type") +
  theme(plot.title = element_text(size = 10, hjust = 0.4),
        plot.subtitle = element_text(size = 8, hjust = 0.4))

ggplot(ProjectPlays_Last2Min_All3rdDowns) + 
  geom_point(mapping = aes(x = ydstogo, y = ADJTimeLeft, col = PlayType)) +
  labs(x = "Yards to Go", y = "ADJ Time Left (def T.O. = +40 sec)",
       title = "Do Offenses Usually Pass Up by One Score in Final 2 Min?",
       subtitle = "3rd Down Plays, from 2001-2020 (n = 978)",
       caption = "Data from nflfastR",
       color = "Play Type") +
  theme(plot.title = element_text(size = 10, hjust = 0.4),
        plot.subtitle = element_text(size = 8, hjust = 0.4))
